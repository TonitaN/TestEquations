
/*('As d As e e Hs c As = b d As Fs c As')*/
*$MST_FROM_ENTRY;

*$MATCHING ForRepeatedSpecialization ;

*$STRATEGY Applicative ;
/*
$ENTRY Go {
 = <Prout <Go e.1 >> ;
}
*/

***
/*
*  InputFormat: <Go e.41 >
*  OutputFormat: ==> e.0 
*/


$ENTRY Go {
 (('As -> empty') e.101) =  False;
 (('As -> b As') ('Fs -> empty') e.101) =  False;
 (('As -> b As') ('As -> empty') ('Fs -> empty') e.101) =  False;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> empty') e.101) =  False;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') ('Fs -> empty') ('Hs -> empty')) =  True;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') ('Fs -> empty') ('Hs -> empty') e.101) =  False;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') ('Fs -> empty') e.101) =  False;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') ('Hs -> empty') ('Fs -> empty')) =  True;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') ('Hs -> empty') ('Fs -> empty') e.101) =  False;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') ('Hs -> empty') e.101) =  False;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') ('Hs -> Fs Hs') ('Hs -> empty')) =  True;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') ('Hs -> Fs Hs') ('Hs -> empty') e.101) =  False;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') ('Hs -> Fs Hs') e.101) =  False;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') ('Fs -> Hs Fs') ('Fs -> empty')) =  True;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') ('Fs -> Hs Fs') ('Fs -> empty') e.101) =  False;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') ('Fs -> Hs Fs') e.101) =  False;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') ('Fs -> e Fs') e.101) =  False;
 (('As -> b As') ('As -> empty') ('Fs -> e Fs') e.101) =  False;
 (('As -> b As') ('As -> empty') e.101) =  False;
 (('As -> b As') ('As -> Fs As') e.101) =  False;
 (('As -> b As') ('Fs -> As Fs') ('Fs -> empty') e.101) =  False;
 (('As -> b As') ('Fs -> As Fs') ('Fs -> e Fs') ('Fs -> empty') e.101) =  False;
 (('As -> b As') ('Fs -> As Fs') ('Fs -> e Fs') ('Fs -> e Fs') ('Fs -> empty') ('Hs -> empty') e.101) =  <F1903 e.101>;
 (('As -> b As') ('Fs -> As Fs') ('Fs -> e Fs') ('Fs -> e Fs') ('Fs -> empty') e.101) =  False;
 (('As -> b As') ('Fs -> As Fs') ('Fs -> e Fs') ('Fs -> e Fs') ('Hs -> empty') ('Fs -> empty') e.101) =  <F1903 e.101>;
 (('As -> b As') ('Fs -> As Fs') ('Fs -> e Fs') ('Fs -> e Fs') ('Hs -> empty') e.101) =  False;
 (('As -> b As') ('Fs -> As Fs') ('Fs -> e Fs') ('Fs -> e Fs') ('Hs -> Fs Hs') ('Hs -> empty') e.101) =  <F1903 e.101>;
 (('As -> b As') ('Fs -> As Fs') ('Fs -> e Fs') ('Fs -> e Fs') ('Hs -> Fs Hs') e.101) =  False;
 (('As -> b As') ('Fs -> As Fs') ('Fs -> e Fs') ('Fs -> e Fs') ('Fs -> Hs Fs') ('Fs -> empty') e.101) =  <F1903 e.101>;
 (('As -> b As') ('Fs -> As Fs') ('Fs -> e Fs') ('Fs -> e Fs') ('Fs -> Hs Fs') e.101) =  False;
 (('As -> b As') ('Fs -> As Fs') ('Fs -> e Fs') ('Fs -> e Fs') e.101) =  False;
 (('As -> b As') ('Fs -> As Fs') ('Fs -> e Fs') e.101) =  False;
 (('As -> b As') ('Fs -> As Fs') e.101) =  False;
 (('As -> b As') e.101) =  False;
 (e.101) =  False;
}

/*
*  InputFormat: <F1903 e.101 >
*  OutputFormat: ==> s.1649 
*/
F1903 {
 ('As -> empty') =  True;
 ('As -> empty') e.101 =  False;
 ('As -> d As') ('As -> empty') e.101 =  False;
 ('As -> d As') ('As -> b As') e.101 =  <F1903 e.101>;
 e.101 =  False;
}

****************************** The End ************************************

