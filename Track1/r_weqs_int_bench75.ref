
/*
('b h e b f d e e c c f Cs b c a a h j i Ds j c i a h h e j i h e a c f g a i b h f b d b e e d f =
  b h e b f d e e c c f a g b j i i g f g e c f d b c a a h j i Ds j c i a h h e j i h e a c f g a i b h f b d b e e d f')*/
*$MST_FROM_ENTRY;

*$MATCHING ForRepeatedSpecialization ;

*$STRATEGY Applicative ;
/*
$ENTRY Go {
 = <Prout <Go e.1 >> ;
}
*/

***
/*
*  InputFormat: <Go e.41 >
*  OutputFormat: ==> e.0 
*/


$ENTRY Go {
 (('Cs -> empty') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> empty') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> empty') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> empty') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> empty') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> empty') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') ('Cs -> empty') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') ('Cs -> g Cs') ('Cs -> empty') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') ('Cs -> g Cs') ('Cs -> f Cs') ('Cs -> empty') e.101) =  False
               ;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs')
    ('Cs -> g Cs') ('Cs -> f Cs') ('Cs -> g Cs') ('Cs -> empty') e.101
 ) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs')
    ('Cs -> g Cs') ('Cs -> f Cs') ('Cs -> g Cs') ('Cs -> e Cs') ('Cs -> empty') e.101
 ) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') ('Cs -> g Cs')
    ('Cs -> f Cs') ('Cs -> g Cs') ('Cs -> e Cs') ('Cs -> c Cs') ('Cs -> empty') e.101
 ) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') ('Cs -> g Cs')
    ('Cs -> f Cs') ('Cs -> g Cs') ('Cs -> e Cs') ('Cs -> c Cs') ('Cs -> f Cs') ('Cs -> empty') e.101
 ) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') ('Cs -> g Cs')
    ('Cs -> f Cs') ('Cs -> g Cs') ('Cs -> e Cs') ('Cs -> c Cs') ('Cs -> f Cs') ('Cs -> d Cs') ('Cs -> empty')
 ) =  True;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') ('Cs -> g Cs') ('Cs -> f Cs')
    ('Cs -> g Cs') ('Cs -> e Cs') ('Cs -> c Cs') ('Cs -> f Cs') ('Cs -> d Cs') ('Cs -> empty') e.101
 ) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') ('Cs -> g Cs')
    ('Cs -> f Cs') ('Cs -> g Cs') ('Cs -> e Cs') ('Cs -> c Cs') ('Cs -> f Cs') ('Cs -> d Cs') e.101
 ) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') ('Cs -> g Cs')
    ('Cs -> f Cs') ('Cs -> g Cs') ('Cs -> e Cs') ('Cs -> c Cs') ('Cs -> f Cs') e.101
 ) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs')
    ('Cs -> g Cs') ('Cs -> f Cs') ('Cs -> g Cs') ('Cs -> e Cs') ('Cs -> c Cs') e.101
 ) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs')
    ('Cs -> g Cs') ('Cs -> f Cs') ('Cs -> g Cs') ('Cs -> e Cs') e.101
 ) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') ('Cs -> g Cs') ('Cs -> f Cs') ('Cs -> g Cs') e.101) =  False
               ;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') ('Cs -> g Cs') ('Cs -> f Cs') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') ('Cs -> g Cs') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') ('Cs -> i Cs') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') ('Cs -> i Cs') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') ('Cs -> j Cs') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') ('Cs -> b Cs') e.101) =  False;
 (('Cs -> a Cs') ('Cs -> g Cs') e.101) =  False;
 (('Cs -> a Cs') e.101) =  False;
 (e.101) =  False;
}

****************************** The End ************************************

