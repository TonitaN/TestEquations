/* The refined interpreter with the generation of recommended path restrictions based on the length analysis. */
*$MST_FROM_ENTRY;
*$MATCHING ForRepeatedSpecialization;
*$STRATEGY Applicative;

$ENTRY Go
{ e.Rules =
<Eq (e.Rules) <Sim ('Q')(  )
  <Decode (<Conc ('d e c f e f b a Fs f d a f a e Fs a f b Fs Bs b c Bs a d e b b c f a c e f c Bs =')
    ' d e Fs f e f b a c f d Es Fs Bs b Fs Bs a d e b b c f a Fs e f c b b'>)>
  <Decode (<Conc ('f b d e b e b b a c d e a a f e b b b d e e a a c a d c e d e d a f a e e a f b =')
    ' f b d e b e Bs a Fs d e a a f e Bs b d e e a a c a d c e d e d a f a e e a f b'>)>
  <Decode (<Conc ('e a Fs d f e f Fs d b b Fs f f c e e e b e b c f e f f d f f f b a c f f e Fs a c f =')
    ' e a c d f e f Fs d Bs c f f c e e e b e b c f e f f d f f f b a Fs f f e c a Fs f'>)>>>;
}

Conc {(e.1) e.2 = e.1 e.2;}

Const__ { e.x = e.x;}

/* Ãëàâíàÿ ôóíêöèÿ ïåðåêîäèðîâêè óðàâíåíèÿ èç ïîëüçîâàòåëüñêîãî ôîðìàòà âî âíóòðåííèé ôîðìàò èíòåðïðåòàòîðà. */
Decode {
	(e.Left'='e.Right) = ((<Translate e.Left>)(<Translate e.Right>));
}

/* Ñïèñîê âñåõ ëèòåðàëîâ, êîòîðûå ìîãóò âûñòóïàòü â êà÷åñòâå èìåí ïåðåìåííûõ. */
Variables {
	= 'QWERTYUIOPASDFGHJKLZXCVBNM';
}

/* Ñïèñîê âñåõ ëèòåðàëîâ, êîòîðûå ìîãóò âûñòóïàòü â êà÷åñòâå áóêâ àëôàâèòà êîíñòàíò. */
Alphabet {
	= 'qwertyuiopasdfghjklzxcvbnm'; 
}

IfInSet {
	s.Term (s.Term e.Rest) = 'T';
	s.Term ( ) = 'F';
	s.Term (s.OtherTerm e.Rest) = <IfInSet s.Term (e.Rest)>;
}

Translate {
	/* EMPTY */ = /* EMPTY */;
	' 'e.x = <Translate e.x>;
	e.x' ' = <Translate e.x>;
	Started (e.Result) 'TF'(e.variables)(e.alphabet)s.Name's'
		= e.Result (var 'e' s.Name);
	Started (e.Result) 'TF'(e.variables)(e.alphabet)s.Name
		=  e.Result (var 's' s.Name);
	Started (e.Result)'FT'(e.variables)(e.alphabet)s.Name
		= e.Result s.Name;
	Started (e.Result)'TF'(e.variables)(e.alphabet)s.Name's ' s.Next e.Rest
		= <Translate Started (e.Result (var 'e' s.Name))
			<IfInSet s.Next(e.variables)><IfInSet s.Next(e.alphabet)>(e.variables)(e.alphabet) s.Next e.Rest>;
	Started (e.Result)'TF'(e.variables)(e.alphabet)s.Name' 's.Next e.Rest
		= <Translate Started (e.Result (var 's' s.Name))
			<IfInSet s.Next(e.variables)><IfInSet s.Next(e.alphabet)>(e.variables)(e.alphabet)s.Next e.Rest>;
	Started (e.Result)'FT'(e.variables)(e.alphabet)s.Name' 's.Next e.Rest
		= <Translate Started (e.Result s.Name)
			<IfInSet s.Next(e.variables)><IfInSet s.Next(e.alphabet)>(e.variables)(e.alphabet)s.Next e.Rest>;
	s.Term e.Rest = <Translate Started ( ) 
		<IfInSet s.Term(<Variables>)><IfInSet s.Term(<Alphabet>)>
		(<Variables>)(<Alphabet>) s.Term e.Rest>;
}

/*
Ôóíêöèÿ Eq îñóùåñòâëÿåò ðàçâåðòêó ñèñòåìû óðàâíåíèé ñîãëàñíî çàäàííîìó ïóòè è èìååò âõîäíîé ôîðìàò: (#e.Rules)((e.LHS)(e.RHS))e.Equations. 
Ïàðàìåòð e.Rules – ïóòü ïî äåðåâó ðåøåíèé ñèñòåìû óðàâíåíèé, 
  e.LHS è e.RHS – ëåâàÿ è ïðàâàÿ ÷àñòè óðàâíåíèÿ e.LHS = e.RHS èìåþò îäèíàêîâûé ñèíòàêñèñ;
  e.LHS ::= Symbol e.LHS || (var 'e' s.Name) e.LHS || EMPTY 
  e.Equations ::= ((e.LHS)(e.RHS)) || EMPTY
*/
Eq {
/* 1à. Åñëè îáå ÷àñòè åäèíñòâåííîãî â ñïèñêå óðàâíåíèÿ ïóñòû, ïîëó÷åíî òðèâèàëüíîå òîæäåñòâî è ðàçâåðòêà çàâåðøàåòñÿ. 
  Ñ÷èòàåì, ÷òî ñïèñîê ïðàâèë, êîòîðûå íóæíî ïðèìåíèòü ê ýòîìó òîæäåñòâó, òàêæå ïóñò. */
	(/* EMPTY */)(Recommended e.Z)(s.VarName)((/*EMPTY*/)(/*EMPTY*/)) = True;
/* 1á. Åñëè îáå ÷àñòè î÷åðåäíîãî â ñïèñêå óðàâíåíèÿ ïóñòû, ïåðåõîäèì ê ðàçâåðòêå ñëåäóþùåãî óðàâíåíèÿ â ñïèñêå. */
	(e.Rules)(Recommended e.Z)(s.VarName)((/*EMPTY*/)(/*EMPTY*/)) e.Other = <Eq (e.Rules)(Recommended e.Z)(s.VarName) e.Other>;
	((s.x's -> empty') e.R1)(Recommended (s.x's -> empty')e.OtherRec)(s.VarName) e.Eqs
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			<subst_2 (assign (var 'e' s.x)(/* EMPTY */))e.Eqs>
		>>;
	((s.x's -> 's.x's 's.Sym) e.R1)(Recommended (s.x's -> 's.x's 's.Sym'VAR')e.OtherRec)(s.VarName) e.Eqs
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			<subst_2 (assign (var 'e' s.x)((var 'e' s.x)(var 's' s.Sym)))e.Eqs>
		>>;
	((s.x's -> 's.x's 's.Sym) e.R1)(Recommended (s.x's -> 's.x's 's.Sym)e.OtherRec)(s.VarName) e.Eqs
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			<subst_2 (assign (var 'e' s.x)((var 'e' s.x)s.Sym))e.Eqs>
		>>;
	((s.x's -> 's.y' 's.x's') e.R1)(Recommended (s.x's -> 's.y'VAR 's.x's')e.OtherRec)(s.VarName) e.Eqs
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			<subst_2 (assign (var 'e' s.x)((var 's' s.y)(var 'e' s.x)))e.Eqs>
		>>;
	((s.x's -> 's.x's 's.y's') e.R1)(Recommended (s.x's -> 's.x's 's.y's')e.OtherRec)(s.VarName) e.Eqs
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			<subst_2 (assign (var 'e' s.x)((var 'e' s.x)(var 'e' s.y)))e.Eqs>
		>>;
/* 2à+4a+6a. Êàêîâà áû íè áûëà ïðàâàÿ ÷àñòü óðàâíåíèÿ, åñëè ëåâàÿ íà÷èíàåòñÿ ñ å-ïåðåìåííîé x, è ïðàâèëî ïðåîáðàçîâàíèÿ åñòü x -> empty,
  òîãäà ñòðîèì ïðèñâàèâàíèå ýòîé ïåðåìåííîé çíà÷åíèÿ, ðàâíîãî ïóñòîé ñòðîêå, è îñóùåñòâëÿåì ïîäñòàíîâêó äàííîãî ïðèñâàèâàíèÿ. */	
	((s.x's -> empty') e.R1)(Recommended)(s.VarName)((e.LHS)((var 'e' s.x) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)(/* EMPTY */))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 'e' s.x)(/* EMPTY */))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)(/* EMPTY */))e.Other>
		>>;
/* 2á+4á+6á. Êàêîâà áû íè áûëà ëåâàÿ ÷àñòü óðàâíåíèÿ, åñëè ïðàâàÿ íà÷èíàåòñÿ ñ å-ïåðåìåííîé x, è ïðàâèëî ïðåîáðàçîâàíèÿ åñòü x -> empty, 
  òîãäà ñòðîèì ïðèñâàèâàíèå ýòîé ïåðåìåííîé çíà÷åíèÿ, ðàâíîãî ïóñòîé ñòðîêå, è îñóùåñòâëÿåì ïîäñòàíîâêó äàííîãî ïðèñâàèâàíèÿ. */	
	((s.x's -> empty') e.R1)(Recommended)(s.VarName)(((var 'e' s.x) e.LHS)(e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)(/* EMPTY */))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 'e' s.x)(/* EMPTY */))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)(/* EMPTY */))e.Other>
		>>;
/* 3a. Åñëè ëåâàÿ ÷àñòü óðàâíåíèÿ íà÷èíàåòñÿ ñ e-ïåðåìåííîé x, à ïðàâàÿ – ñ áóêâû s.Sym, 
  è ïðàâèëî ïðåîáðàçîâàíèÿ åñòü x -> s.Sym x, îñóùåñòâëÿåì ïîäñòàíîâêó x := s.Sym++x. 
  Ïîñëå ýòîãî âûçûâàåì ôóíêöèþ óïðîùåíèÿ óðàâíåíèé (Sim). */
	((s.x' -> 's.Sym) e.R1)(Recommended)(s.VarName)(((var 's' s.x) e.LHS)(s.Sym e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 's' s.x)(s.Sym))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 's' s.x)(s.Sym))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 's' s.x)(s.Sym))e.Other>
		>>;
/* 3a. Åñëè ëåâàÿ ÷àñòü óðàâíåíèÿ íà÷èíàåòñÿ ñ e-ïåðåìåííîé x, à ïðàâàÿ – ñ áóêâû s.Sym, 
  è ïðàâèëî ïðåîáðàçîâàíèÿ åñòü x -> s.Sym x, îñóùåñòâëÿåì ïîäñòàíîâêó x := s.Sym++x. 
  Ïîñëå ýòîãî âûçûâàåì ôóíêöèþ óïðîùåíèÿ óðàâíåíèé (Sim). */
	((s.x' -> 's.y) e.R1)(Recommended)(s.VarName)(((var 's' s.y) e.LHS)((var 's' s.x) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 's' s.x)((var 's' s.y)))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 's' s.x)((var 's' s.y)))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 's' s.x)((var 's' s.y)))e.Other>
		>>;
/* 3a. Åñëè ëåâàÿ ÷àñòü óðàâíåíèÿ íà÷èíàåòñÿ ñ e-ïåðåìåííîé x, à ïðàâàÿ – ñ áóêâû s.Sym, 
  è ïðàâèëî ïðåîáðàçîâàíèÿ åñòü x -> s.Sym x, îñóùåñòâëÿåì ïîäñòàíîâêó x := s.Sym++x. 
  Ïîñëå ýòîãî âûçûâàåì ôóíêöèþ óïðîùåíèÿ óðàâíåíèé (Sim). */
	((s.x's -> 's.Sym' 's.x's') e.R1)(Recommended)(s.VarName)(((var 'e' s.x) e.LHS)(s.Sym e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)(s.Sym (var 'e' s.x)))((var 'e' s.x))(e.LHS)>)
			(<subst (assign (var 'e' s.x)(s.Sym (var 'e' s.x)))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)(s.Sym (var 'e' s.x)))e.Other>
		>>;
/* 3á. Åñëè ïðàâàÿ ÷àñòü óðàâíåíèÿ íà÷èíàåòñÿ ñ e-ïåðåìåííîé x, à ëåâàÿ – ñ áóêâû s.Sym, 
  è ïðàâèëî ïðåîáðàçîâàíèÿ åñòü x -> s.Sym x, îñóùåñòâëÿåì ïîäñòàíîâêó x := s.Sym++x. 
  Ïîñëå ýòîãî âûçûâàåì ôóíêöèþ óïðîùåíèÿ óðàâíåíèé (Sim). */
	((s.x's -> 's.Sym' 's.x's') e.R1)(Recommended)(s.VarName)((s.Sym e.LHS)((var 'e' s.x) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)(s.Sym (var 'e' s.x)))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 'e' s.x)(s.Sym (var 'e' s.x)))((var 'e' s.x))(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)(s.Sym (var 'e' s.x)))e.Other>
		>>;
/* 3a. Åñëè ëåâàÿ ÷àñòü óðàâíåíèÿ íà÷èíàåòñÿ ñ e-ïåðåìåííîé x, à ïðàâàÿ – ñ áóêâû s.Sym, 
  è ïðàâèëî ïðåîáðàçîâàíèÿ åñòü x -> s.Sym x, îñóùåñòâëÿåì ïîäñòàíîâêó x := s.Sym++x. 
  Ïîñëå ýòîãî âûçûâàåì ôóíêöèþ óïðîùåíèÿ óðàâíåíèé (Sim). */
	((s.x's -> 's.y' 's.x's') e.R1)(Recommended)(s.VarName)(((var 'e' s.x) e.LHS)((var 's' s.y) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)((var 's' s.y) (var 'e' s.x)))((var 'e' s.x))(e.LHS)>)
			(<subst (assign (var 'e' s.x)((var 's' s.y) (var 'e' s.x)))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)((var 's' s.y) (var 'e' s.x)))e.Other>
		>>;
/* 3á. Åñëè ïðàâàÿ ÷àñòü óðàâíåíèÿ íà÷èíàåòñÿ ñ e-ïåðåìåííîé x, à ëåâàÿ – ñ áóêâû s.Sym, 
  è ïðàâèëî ïðåîáðàçîâàíèÿ åñòü x -> s.Sym x, îñóùåñòâëÿåì ïîäñòàíîâêó x := s.Sym++x. 
  Ïîñëå ýòîãî âûçûâàåì ôóíêöèþ óïðîùåíèÿ óðàâíåíèé (Sim). */
	((s.x's -> 's.y' 's.x's') e.R1)(Recommended)(s.VarName)(((var 's' s.y) e.LHS)((var 'e' s.x) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)((var 's' s.y) (var 'e' s.x)))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 'e' s.x)((var 's' s.y) (var 'e' s.x)))((var 'e' s.x))(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)((var 's' s.y) (var 'e' s.x)))e.Other>
		>>;
/* 5a. Åñëè ëåâàÿ ÷àñòü óðàâíåíèÿ íà÷èíàåòñÿ ñ ïåðåìåííîé x, à ïðàâàÿ – ñ ïåðåìåííîé y, è ïðàâèëî ïðåîáðàçîâàíèÿ åñòü x -> y x, 
  îñóùåñòâëÿåì ïîäñòàíîâêó x:= y++x. Ïîñëå ýòîãî âûçûâàåì ôóíêöèþ óïðîùåíèÿ óðàâíåíèé. */
	((s.x's -> 's.y's 's.x's') e.R1)(Recommended)(s.VarName)(((var 'e' s.x) e.LHS)((var 'e' s.y) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)((var 'e' s.y) (var 'e' s.x)))((var 'e' s.x))(e.LHS)>)
			(<subst (assign (var 'e' s.x)((var 'e' s.y) (var 'e' s.x)))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)((var 'e' s.y)(var 'e' s.x)))e.Other>
		>>;
/* 5á. Åñëè ëåâàÿ ÷àñòü óðàâíåíèÿ íà÷èíàåòñÿ ñ ïåðåìåííîé x, à ïðàâàÿ – ñ ïåðåìåííîé y, è ïðàâèëî ïðåîáðàçîâàíèÿ åñòü y -> x y, 
  îñóùåñòâëÿåì ïîäñòàíîâêó y:= x++y. Ïîñëå ýòîãî âûçûâàåì ôóíêöèþ óïðîùåíèÿ óðàâíåíèé. */
	((s.y's -> 's.x's 's.y's') e.R1)(Recommended)(s.VarName)(((var 'e' s.x) e.LHS)((var 'e' s.y) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.y)((var 'e' s.x)(var 'e' s.y)))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 'e' s.y)((var 'e' s.x) (var 'e' s.y)))((var 'e' s.y))(e.RHS)>))
			<subst_2 (assign (var 'e' s.y)((var 'e' s.x)(var 'e' s.y)))e.Other>
		>>;
/* 7. Âî âñåõ ïðî÷èõ ñëó÷àÿõ ñ÷èòàåì, ÷òî øàã ðåøåíèÿ óðàâíåíèÿ íåâîçìîæåí. */
	(e.R1)e.Other = False;
}


/* Ôóíêöèÿ ïîäñòàíîâêè â âûðàæåíèå èìååò âõîäíîé ôîðìàò:
   (assign (var s.name) (e.Val))(e.Result)(e.StringToSubstituteIn).
   Ðåàëèçîâàíà õâîñòîâîé ðåêóðñèåé: íàêàïëèâàåò ñòðîêó ïîñëå ïîäñòàíîâêè â àðãóìåíòå e.Result è âîçâðàùàåò åå âñþ öåëèêîì. */
subst {
	(assign t.var (e.val))(e.Result) (/*EMPTY*/) = e.Result;
/* Íèæåñëåäóþùåå ïðàâèëî çàïðåùàåò îáîáùåíèå êîíñòàíò, ïîÿâèâøèõñÿ â óðàâíåíèè â ðåçóëüòàòå ïîäñòàíîâêè, ïîñðåäñòâîì ïðèìåíåíèÿ
  ïñåâäîôóíêöèè Const__. */
	(assign (var s.type s.n) (e.val))(e.Result) ((var s.type s.n) e.Rest) = <subst (assign (var s.type s.n) (e.val))(e.Result <Const__ e.val>) (e.Rest)>;
/* Ïðàâèëî ïîäñòàíîâêè, íå íàêëàäûâàþùåå çàïðåò íà îáîáùåíèå. */
*	(assign (var s.type s.n) (e.val))(e.Result) ((var s.type s.n) e.Rest) = <subst (assign (var s.type s.n) (e.val))(e.Result e.val) (e.Rest)>;
	(assign t.var (e.val))(e.Result) (t.other e.Rest) = <subst (assign t.var (e.val))(e.Result t.other) (e.Rest)>;
}

/* Ôóíêöèÿ âûçîâà ïîäñòàíîâêè êî âñåì ëåâûì è ïðàâûì ÷àñòÿì óðàâíåíèé â ñèñòåìå. 
 Âõîäíîé ôîðìàò:   (assign (var s.name) (e.Val)) e.Equations,
ãäå e.Equations ëèáî ïóñòî, ëèáî íà÷èíàåòñÿ ñ óðàâíåíèÿ âèäà ((e.LHS)(e.RHS)). */
subst_2 {
	t.Asg ((e.LHS)(e.RHS)) e.Other
		= ((<subst t.Asg (/* EMPTY */) (e.LHS)>)(<subst t.Asg (/* EMPTY */) (e.RHS)>))
		<subst_2 t.Asg e.Other>;
	t.Asg (assign e.asg) e.Other = (assign e.asg)<subst_2 t.Asg e.Other>;
	t.Asg /* EMPTY */ = /* EMPTY */;
}	

/* Ìîäèôèöèðîâàííàÿ ôóíêöèÿ óïðîùåíèÿ óäàëÿåò îäèíàêîâûå òåðìû ñ ëåâîé è ïðàâîé ñòîðîíû óðàâíåíèÿ. Èìååò âõîäíîé ôîðìàò ((e.LHS)(e.RHS))^*. */
Sim {
  /* 1a-left. Óäàëåíèå îäèíàêîâûõ áóêâ ñëåâà è ñïðàâà. */
	(s.VarName)(e.Processed)((s.x e.LHS)(s.x e.RHS)) e.Other = <Sim (s.VarName)(e.Processed)((e.LHS)(e.RHS)) e.Other>;
  /* 1a-right. Óäàëåíèå îäèíàêîâûõ áóêâ ñëåâà è ñïðàâà. */
	(s.VarName)(e.Processed)((e.LHS s.x)(e.RHS s.x)) e.Other = <Sim (s.VarName)(e.Processed)((e.LHS)(e.RHS)) e.Other>;
  /* 1á-left. Óäàëåíèå îäèíàêîâûõ ïåðåìåííûõ. */
	(s.VarName)(e.Processed)(((var s.type s.n) e.LHS)((var s.type s.n) e.RHS)) e.Other = <Sim (s.VarName)(e.Processed)((e.LHS)(e.RHS)) e.Other>;
  /* 1á-right. Óäàëåíèå îäèíàêîâûõ ïåðåìåííûõ. */
	(s.VarName)(e.Processed)((e.LHS (var s.type s.n))(e.RHS (var s.type s.n))) e.Other = <Sim (s.VarName)(e.Processed) ((e.LHS)(e.RHS)) e.Other>;
  /* 2à. Óðàâíåíèå ïðåîáðàçîâàíî ê òðèâèàëüíîìó òîæäåñòâó: âîçâðàùàåì ýòî òîæäåñòâî è óïðîùàåì îñòàëüíûå óðàâíåíèÿ â ñèñòåìå. */
	(s.VarName)(e.Processed)((/* EMPTY */)(/* EMPTY */)) e.Other = <Sim (s.VarName)(e.Processed ((/* EMPTY */)(/* EMPTY */))) e.Other>;
  /* 2á-left. Óðàâíåíèå ïðåîáðàçîâàíî ê òðèâèàëüíîìó ïðîòèâîðå÷èþ (ïîñêîëüêó ïðåäëîæåíèå 2á íàõîäèòñÿ íèæå, ÷åì 1à-left, 
  òî s.x íå ñîâïàäàåò ñ s.y): âîçâðàùàåì ïðîòèâîðå÷èâîå óðàâíåíèå è óäàëÿåì âñå îñòàëüíûå óðàâíåíèÿ èç ñèñòåìû. */
	(s.VarName)(e.Processed)((s.x e.LHS)(s.y e.RHS)) e.Other = (s.VarName)((s.x)(s.y));
  /* 2á-right. Óðàâíåíèå ïðåîáðàçîâàíî ê òðèâèàëüíîìó ïðîòèâîðå÷èþ (ïîñêîëüêó ïðåäëîæåíèå 2á íàõîäèòñÿ íèæå, ÷åì 1à-left, 
  òî s.x íå ñîâïàäàåò ñ s.y): âîçâðàùàåì ïðîòèâîðå÷èâîå óðàâíåíèå è óäàëÿåì âñå îñòàëüíûå óðàâíåíèÿ èç ñèñòåìû. */
	(s.VarName)(e.Processed)((e.LHS s.x)(e.RHS s.y)) e.Other = (s.VarName)((s.x)(s.y));
  /* 3. Óðàâíåíèå íå ïðåîáðàçîâàíî ê òðèâèàëüíîìó ïðîòèâîðå÷èþ, è ñîêðàùàòü áîëüøå íå÷åãî: 
  ïûòàåìñÿ ðàñùåïèòü ýòî óðàâíåíèå è óïðîùàåì îñòàëüíûå óðàâíåíèÿ ñèñòåìû. */
	(s.VarName)(e.Processed)((e.x)(e.y)) e.Other = 
		<Sim (s.VarName)(e.Processed <Split 
			(/* EMPTY */) /* óðàâíåíèÿ – ðåçóëüòàòû ðàñùåïëåíèÿ */
			'N' /* òåêóùåå ñîñòîÿíèå ðàçáèåíèÿ – íåîïðåäåëåííîå */
			((Const ))((Const )) /* ìóëüòèìíîæåñòâà áóêâ è ïåðåìåííûõ ÷àñòåé óðàâíåíèÿ ïóñòû */
			((/* EMPTY */)(/* EMPTY */)) /* îòùåïëÿåìûå ïðåôèêñû òîæå ïóñòû */
			((e.x)(e.y)) /* ñóôôèêñû ñîâïàäàþò ñî ñòîðîíàìè óðàâíåíèÿ */
		>) e.Other>;
  /* 4. Óïðîùàòü áîëüøå íå÷åãî – çàêàí÷èâàåì ðàáîòó. */
	(s.VarName)(e.Processed)/* EMPTY */ = <SortContr (s.VarName)(/* EMPTY */)(/* EMPTY */) e.Processed>;
}

SortContr {
	(s.VarName)(e.Processed)(e.RecAsgs)((s.x)(s.y)) e.Other = (Recommended)(s.VarName)((s.x)(s.y));
	(s.VarName)(e.Processed)(e.RecAsgs)(assign contradiction) e.Other = (Recommended)(s.VarName)(('A')('B'));
	(s.VarName)(e.Processed)(e.RecAsgs)(((var 's' s.n1))(s.Sym)) e.Other = <SortContr (s.VarName)((((var 's' s.n1))(s.Sym)) e.Processed)(e.RecAsgs) e.Other>;
	(s.VarName)(e.Processed)(e.RecAsgs)((s.Sym)((var 's' s.n1))) e.Other = <SortContr (s.VarName)((((var 's' s.n1))(s.Sym)) e.Processed)(e.RecAsgs) e.Other>;
	(s.VarName)(e.Processed)(e.RecAsgs)(((var 's' s.n1))((var 's' s.n2))) e.Other = <SortContr (s.VarName)((((var 's' s.n1))((var 's' s.n2))) e.Processed)(e.RecAsgs) e.Other>;
	(s.VarName)(e.Processed)(e.RecAsgs)(assign (var 'e' s.n) (/* EMPTY */)) e.Other
		= <SortContr (s.VarName)(e.Processed)((s.n's -> empty') e.RecAsgs) e.Other>;
	(s.VarName)(e.Processed)(/* EMPTY */)(assign (var 'e' s.n) ((var 'e' s.n) s.Sym)) e.Other
		= <SortContr (s.VarName)(e.Processed)((s.n's -> 's.n's 's.Sym))e.Other>;
	(s.VarName)(e.Processed)(/* EMPTY */)(assign (var 'e' s.n) ((var 'e' s.n) (var 's' s.m))) e.Other
		= <SortContr (s.VarName)(e.Processed)((s.n's -> 's.n's 's.n'VAR'))e.Other>;
	(s.VarName)(e.Processed)(/* EMPTY */)(assign (var 'e' s.n) ((var 'e' s.n)(var 'e' s.m))) e.Other
		= <SortContr (s.VarName)(e.Processed)((s.n's -> 's.n's 's.m's'))e.Other>;
	(s.VarName)(e.Processed)(/* EMPTY */)(assign (var 'e' s.n) ('I'e.Num)) e.Other
		= <SortContr (<NextVar (<Variables>)s.VarName>)(e.Processed)((s.n's -> 's.VarName'VAR 's.n's'))e.Other>;
	(s.VarName)(e.Processed)((s.x's -> 's.x's'e.Z))(assign (var 'e' s.n) ('I'e.Num)) e.Other
		= <SortContr (<NextVar (<Variables>)s.VarName>)(e.Processed)((s.n's -> 's.VarName'VAR 's.n's'))e.Other>;
	(s.VarName)(e.Processed)(e.RecAsgs)(assign e.NotRelevant) e.Other = <SortContr (s.VarName)(e.Processed)(e.RecAsgs) e.Other>;
	(s.VarName)(e.Processed)(e.RecAsgs)(e.NormalEq) e.Other = <SortContr (s.VarName)(e.Processed (e.NormalEq))(e.RecAsgs) e.Other>;
	(s.VarName)(e.Processed)(e.RecAsgs) /* EMPTY */ = (Recommended e.RecAsgs)(s.VarName)e.Processed;
}

SortAssignments {
	(e.Processed)(e.Eqs)(assign (var 'e' s.name)(/* EMPTY */))e.ToProcess
		= <SortAssignments (e.Processed (assign (var 'e' s.name)(/* EMPTY */)))(e.Eqs)e.ToProcess>;
	(e.Processed)(e.Eqs)(assign contradiction) e.ToProcess
		= (('A')('B'))(/* EMPTY */);
	(e.Processed)(e.Eqs)(assign e.Otherasg) e.ToProcess
		= <SortAssignments (e.Processed)(e.Eqs) e.ToProcess>;
	(e.Processed)(e.Eqs)((e.LHS)(e.RHS)) e.ToProcess
		= <SortAssignments (e.Processed)(e.Eqs ((e.LHS)(e.RHS))) e.ToProcess>;
	(e.Processed)(e.Eqs)/* EMPTY */ = e.Eqs (e.Processed);
}

SubstituteMany {
	e.Eqs (/* EMPTY */) = e.Eqs;
	e.Eqs (t.asg e.Rest) = <SubstituteMany <subst_2 t.asg e.Eqs> (e.Rest)>;
}

ProceedSort {
	(assign t.var (e.Data (s.Name))) e.Equations = <SortContr (s.Name)(/* EMPTY */)<subst_2 (assign t.var (e.Data))e.Equations>>;
}

/* Ìîäèôèöèðîâàííàÿ ôóíêöèÿ óïðîùåíèÿ óäàëÿåò îäèíàêîâûå òåðìû ñ ëåâîé è ïðàâîé ñòîðîíû óðàâíåíèÿ. Èìååò âõîäíîé ôîðìàò ((e.LHS)(e.RHS))^*. */
Sim2 {
  /* 1a-left. Óäàëåíèå îäèíàêîâûõ áóêâ ñëåâà è ñïðàâà. */
	((s.x e.LHS)(s.x e.RHS)) e.Other = <Sim2 ((e.LHS)(e.RHS)) e.Other>;
  /* 1a-right. Óäàëåíèå îäèíàêîâûõ áóêâ ñëåâà è ñïðàâà. */
	((e.LHS s.x)(e.RHS s.x)) e.Other = <Sim2 ((e.LHS)(e.RHS)) e.Other>;
  /* 1á-left. Óäàëåíèå îäèíàêîâûõ ïåðåìåííûõ. */
	(((var s.type s.n) e.LHS)((var s.type s.n) e.RHS)) e.Other = <Sim2 ((e.LHS)(e.RHS)) e.Other>;
  /* 1á-right. Óäàëåíèå îäèíàêîâûõ ïåðåìåííûõ. */
	((e.LHS (var s.type s.n))(e.RHS (var s.type s.n))) e.Other = <Sim2 ((e.LHS)(e.RHS)) e.Other>;
  /* 2à. Óðàâíåíèå ïðåîáðàçîâàíî ê òðèâèàëüíîìó òîæäåñòâó: âîçâðàùàåì ýòî òîæäåñòâî è óïðîùàåì îñòàëüíûå óðàâíåíèÿ â ñèñòåìå. */
	((/* EMPTY */)(/* EMPTY */)) e.Other = ((/* EMPTY */)(/* EMPTY */)) <Sim2 e.Other>;
  /* 2á-left. Óðàâíåíèå ïðåîáðàçîâàíî ê òðèâèàëüíîìó ïðîòèâîðå÷èþ (ïîñêîëüêó ïðåäëîæåíèå 2á íàõîäèòñÿ íèæå, ÷åì 1à-left, 
  òî s.x íå ñîâïàäàåò ñ s.y): âîçâðàùàåì ïðîòèâîðå÷èâîå óðàâíåíèå è óäàëÿåì âñå îñòàëüíûå óðàâíåíèÿ èç ñèñòåìû. */
	((s.x e.LHS)(s.y e.RHS)) e.Other = ((s.x)(s.y));
  /* 2á-right. Óðàâíåíèå ïðåîáðàçîâàíî ê òðèâèàëüíîìó ïðîòèâîðå÷èþ (ïîñêîëüêó ïðåäëîæåíèå 2á íàõîäèòñÿ íèæå, ÷åì 1à-left, 
  òî s.x íå ñîâïàäàåò ñ s.y): âîçâðàùàåì ïðîòèâîðå÷èâîå óðàâíåíèå è óäàëÿåì âñå îñòàëüíûå óðàâíåíèÿ èç ñèñòåìû. */
	((e.LHS s.x)(e.RHS s.y)) e.Other = ((s.x)(s.y));
  /* 3. Óðàâíåíèå íå ïðåîáðàçîâàíî ê òðèâèàëüíîìó ïðîòèâîðå÷èþ, è ñîêðàùàòü áîëüøå íå÷åãî: 
  ïûòàåìñÿ ðàñùåïèòü ýòî óðàâíåíèå è óïðîùàåì îñòàëüíûå óðàâíåíèÿ ñèñòåìû. */
	((e.x)(e.y)) e.Other = ((e.x)(e.y))
	<Sim2 e.Other>;
  /* 4. Óïðîùàòü áîëüøå íå÷åãî – çàêàí÷èâàåì ðàáîòó. */
	/* EMPTY */ = /* EMPTY */;
}

/* Ôóíêöèÿ ðàñùåïëåíèÿ óðàâíåíèÿ â ñëîâàõ ïî ðàâíîñîñòàâëåííîñòè ÷àñòåé.
    Ðàñùåïëåíèå äåëàåòñÿ òîëüêî ñëåâà! 
   Âõîäíîé ôîðìàò ôóíêöèè:
   (e.Result) s.Log (e.LmultiSet)(e.RmultiSet)((e.Lpref)(e.Rpref))((e.LHSRest)(e.RHSRest)),
    ãäå:
           e.Result – ñïèñîê óðàâíåíèé, óæå îòäåëåííûõ îò èñõîäíîãî;
           s.Log :: = 'N' | 'T' | 'F'   – ñòàòóñ òåêóùåãî ðàñùåïëåíèÿ, ãäå 
                                           'N' – ñòàòóñ íå îïðåäåëåí, 'T' – ðàñùåïëåíèå êîððåêòíî, 'F' – íåêîððåêòíî;
          (e.Lmultiset) è (e.Rmultiset) – ìóëüòèìíîæåñòâà ïåðåìåííûõ è áóêâ, âõîäÿùèõ â ñëîâà e.Lpref è e.Rpref ñîîòâåòñòâåííî;
          e.Lpref è e.Rpref – ïðåôèêñû ëåâîé è ïðàâîé ñòîðîí óðàâíåíèÿ, êîòîðûå ïðîâåðÿþòñÿ íà ðàâíîñîñòàâëåííîñòü. Âñåãäà (ïî ïîñòðîåíèþ) ñîñòîÿò èç îäèíàêîâîãî ÷èñëà òåðìîâ.
          e.LHSRest è e.RHSRest – îñòàòêè ëåâîé è ïðàâîé ñòîðîí óðàâíåíèÿ.
*/
Split {
  /* 1à. Ñòàòóñ ðàñùåïëåíèÿ íå îïðåäåëåí (î÷åðåäíîå îòäåëåíèå òåðìîâ ñëåâà è ñïðàâà óðàâíåíèÿ åùå íå ñäåëàíî), íî îñòàëîñü åùå õîòÿ áû ïî îäíîìó òåðìó ñëåâà è ñïðàâà óðàâíåíèÿ. 
  Ïðèñîåäèíÿåì ñîîòâåòñòâóþùèå òåðìû ñïðàâà ê ïðåôèêñàì è âêëþ÷àåì èõ â ìóëüòèìíîæåñòâà ýëåìåíòîâ ïðåôèêñîâ. Ïîñëå ÷åãî ïðîâåðÿåì ýòè ìóëüòèìíîæåñòâà íà ñîâïàäåíèå – âûçûâàåì
  ôóíêöèþ CountMS. */
	(e.Result)'N'(e.MS1)(e.MS2)((e.LPref)(e.RPref))((t.L1 e.LHS)(t.R1 e.RHS))
		= <Split 
			(e.Result)
			<CountMS <Include t.L1 (/* EMPTY */)(e.MS1)><Include t.R1 (/* EMPTY */)(e.MS2)>>
			((e.LPref t.L1)(e.RPref t.R1))
			((e.LHS)(e.RHS))
		>;
  /* 1á. Ñòàòóñ òåêóùåãî ðàñùåïëåíèÿ: íåêîððåêòíîå. Äåëàåì ïîïûòêó ñëåäóþùåãî ðàñùåïëåíèÿ (ñì. ïðåäëîæåíèå 1à). */
	(e.Result)'F'(e.MS1)(e.MS2)((e.LPref)(e.RPref))((t.L1 e.LHS)(t.R1 e.RHS))
		= <Split 
			(e.Result)
			<CountMS <Include t.L1 (/* EMPTY */)(e.MS1)><Include t.R1 (/* EMPTY */)(e.MS2)>>
			((e.LPref t.L1)(e.RPref t.R1))
			((e.LHS)(e.RHS))
		>;
  /* 2. Ñòàòóñ òåêóùåãî ðàñùåïëåíèÿ – êîððåêòíîå. Ñîñòàâëÿåì èç ïðåôèêñîâ íîâîå óðàâíåíèå è ïåðåõîäèì ê àíàëèçó îñòàâøåéñÿ ÷àñòè èñõîäíîãî óðàâíåíèÿ, îáíóëèâ ðàñùåïëåíèå. */
	(e.Result)'T'(e.MS1)(e.MS2)((e.LPref)(e.RPref))((e.LHS)(e.RHS))
		= <Split
			(e.Result ((e.LPref)(e.RPref)))
			'N'
			((Const ))((Const ))
			((/* EMPTY */)(/* EMPTY */))
			<Sim2 ((e.LHS)(e.RHS))>
		>;
  /* 3. Ðàñùåïëÿòü áûëî íå÷åãî – óðàâíåíèå ïóñòîå. Âîçâðàùàåì âñå îñòàëüíûå óðàâíåíèÿ. */
	(e.Result)s.Log(e.MS1)(e.MS2)((/* EMPTY */)(/* EMPTY */))((/* EMPTY */)(/* EMPTY */))
		= e.Result;
/* 4. Èëè â ëåâîé, èëè â ïðàâîé ÷àñòè óðàâíåíèÿ áîëüøå íå îñòàëîñü òåðìîâ: ïûòàåìñÿ ðàñùåïèòü îñòàòîê óðàâíåíèÿ ñïðàâà. */
	(e.Result)s.Log(e.MS1)(e.MS2)((e.LPref)(e.RPref))((e.LHS)(e.RHS))
		= <SplitRight 
			(e.Result)
			'N'((Const ))((Const ))
			((/* EMPTY */)(/* EMPTY */))
			<Sim2 ((e.LPref e.LHS)(e.RPref e.RHS))>>;
}

/* Ôóíêöèÿ äîáàâëåíèÿ ýëåìåíòà ñ êðàòíîñòüþ 1 â ìóëüòèìíîæåñòâî. 
    Âõîäíîé ôîðìàò:
    t.Term (e.SkippedElements)(e.RestOfMultiset),
    ãäå e.SkippedElements è e.RestOfMultiset – ýòî ïîñëåäîâàòåëüíîñòè ýëåìåíòîâ âèäà ((var s.name) e.Number) èëè (Const e.Number), 
    ïðè÷åì (Const e.Number) âñåãäà ïðèñóòñòâóåò â e.SkippedElements ++ e.RestOfMultiset – íà ïîñëåäíåì ìåñòå.
*/
Include {
  /* 1. Äîáàâëÿåòñÿ áóêâà: óâåëè÷èâàåì ñ÷åò÷èê êîíñòàíò, ñòîÿùèé â ìóëüòèìíîæåñòâå âñåãäà ïîñëåäíèì. */
	s.Sym (e.Prev)(e.MS (Const e.Counter)) = (e.Prev e.MS (Const e.Counter'I'));
  /* 1. Äîáàâëÿåòñÿ áóêâà: óâåëè÷èâàåì ñ÷åò÷èê êîíñòàíò, ñòîÿùèé â ìóëüòèìíîæåñòâå âñåãäà ïîñëåäíèì. */
	(var 's' s.name) (e.Prev)(e.MS (Const e.Counter)) = (e.Prev e.MS (Const e.Counter'I'));
  /* 2. Äîáàâëÿåòñÿ î÷åðåäíîå âõîæäåíèå óæå ïðèñóòñòâóþùåé â ìóëüòèìíîæåñòâå e-ïåðåìåííîé: óâåëè÷èâàåì ñîîòâåòñòâóþùèé ñ÷åò÷èê. */
	(var 'e' s.name)(e.Prev)(((var 'e' s.name) e.Counter) e.Rest)
		= (e.Prev ((var 'e' s.name) e.Counter'I') e.Rest);
  /* 3. Î÷åðåäíîé ýëåìåíò ìóëüòèìíîæåñòâà íå ÿâëÿåòñÿ ñ÷åò÷èêîì âõîæäåíèé äàííîé e-ïåðåìåííîé: äåëàåì øàã ïî ìóëüòèìíîæåñòâó. */
	(var 'e' s.name)(e.Prev)(t.Other e.MS) = <Include (var 'e' s.name)(e.Prev t.Other)(e.MS)>;
  /* 4. Âî âñåì ìóëüòèìíîæåñòâå íå íàøëîñü ýëåìåíòîâ, ñ÷èòàþùèõ âõîæäåíèÿ äàííîé e-ïåðåìåííîé: çàâîäèì äëÿ íåå íîâûé ñ÷åò÷èê ñî çíà÷åíèåì 1
  è ïîìåùàåì åãî â íà÷àëî ìóëüòèìíîæåñòâà. */
	(var 'e' s.name)(e.Prev)(/* EMPTY */) = (((var 'e' s.name) 'I') e.Prev);
}

/* Âñïîìîãàòåëüíàÿ ôóíêöèÿ ïðîâåðêè ðàâåíñòâà äâóõ ìóëüòèìíîæåñòâ. 
    Âõîäíîé ôîðìàò: (e.Multiset1)(e.Multiset2), 
   ãäå e.Multiset1 è e.Multiset2 – ïîñëåäîâàòåëüíîñòè ýëåìåíòîâ âèäà ((var s.name) e.Number), çà êîòîðûìè ñëåäóåò åäèíñòâåííûé ýëåìåíò âèäà (Const e.Number).
*/
CountMS {
	(t.1 e.M1) (e.M2) = <AreEqual (e.M1)(<ElMinus t.1 (/* EMPTY */)(e.M2)>)> (t.1 e.M1) (e.M2);
}

/* Ôóíêöèÿ ïðîâåðêè äâóõ ìóëüòèìíîæåñòâ íà ðàâåíñòâî (â ò.÷. ïî êðàòíîñòè êàæäîãî ýëåìåíòà). 
    Âõîäíîé ôîðìàò: (e.Multiset1)(e.Multiset2 e.Marker), 
    ãäå e.Multiset1 è e.Multiset2 – ïóñòûå ñëîâà ëèáî ïîñëåäîâàòåëüíîñòè ýëåìåíòîâ âèäà ((var s.name) e.Number), 
    çà êîòîðûìè ñëåäóåò åäèíñòâåííûé ýëåìåíò âèäà (Const e.Number); e.Marker – ïóñòîå ñëîâî èëè òåðì FALSE. 
*/
AreEqual {
  /* 1. Åñëè âòîðîå ìóëüòèìíîæåñòâî îòìå÷åíî êàê çàâåäîìî íå ðàâíîå ïåðâîìó – âîçâðàùàåì 'F'. */
	(e.M1)(e.M2 FALSE) = 'F';
  /* 2. Ìóëüòèìíîæåñòâà îêàçàëèñü ïîýëåìåíòíî ðàâíûìè – âîçâðàùàåì 'T'. */
	(/* EMPTY */)(/* EMPTY */) = 'T';
  /* 3a. Ïåðâîå ìóëüòèìíîæåñòâî îêàçàëîñü ñòðîãèì ïîäìíîæåñòâîì âòîðîãî – âîçâðàùàåì 'F'. */
	(/* EMPTY */)(e.Other) = 'F';
  /* 3á. Âòîðîå ìóëüòèìíîæåñòâî îêàçàëîñü ñòðîãèì ïîäìíîæåñòâîì ïåðâîãî – âîçâðàùàåì 'F'. */
	(e.Other)(/* EMPTY */) = 'F';
  /* 4. Â îñòàëüíûõ ñëó÷àÿõ óäàëÿåì ïåðâûé ýëåìåíò ïåðâîãî ìóëüòèìíîæåñòâà èç âòîðîãî êàê èç ìíîæåñòâà. 
Åñëè îêàçàëîñü, ÷òî ýòîò ýëåìåíò îòñóòñòâóåò âî âòîðîì ìóëüòèìíîæåñòâå èëè ïðèñóòñòâóåò ñ äðóãîé êðàòíîñòüþ, òîãäà ïîìå÷àåì âòîðîå ìíîæåñòâî êàê çàâåäîìî íåðàâíîå ïåðâîìó. */
	(t.1 e.M1)(e.M2) = <AreEqual (e.M1)(<ElMinus t.1 (/* EMPTY */)(e.M2)>)>;
	
}

/* Ôóíêöèÿ âû÷èòàíèÿ ýëåìåíòà èç ìóëüòèìíîæåñòâà. Ñ÷èòàåòñÿ âûïîëíåííîé óñïåøíî, åñëè äàííûé ýëåìåíò
   óäàëåí èç ìóëüòèìíîæåñòâà ïîëíîñòüþ, ò.å. êðàòíîñòü âû÷èòàåìîãî ýëåìåíòà ñîâïàäàåò ñ êðàòíîñòüþ åãî â óìåíüøàåìîì ìíîæåñòâå. */
ElMinus {
  /* 1. Ñ÷åò÷èê êîíñòàíò âñåãäà ÿâëÿåòñÿ ïîñëåäíèì ýëåìåíòîì ìóëüòèìíîæåñòâà, ïîýòîìó ïðè âû÷èòàíèè ýëåìåíòà, 
  ñ÷èòàþùåãî êîíñòàíòû, äîñòàòî÷íî óáåäèòüñÿ â ñîâïàäåíèè êîëè÷åñòâà âõîæäåíèé áóêâ è áóêâåííûõ ïåðåìåííûõ. */
	(Const e.Counter) (/* EMPTY */)(e.Rest (Const e.Counter2))
		= e.Rest <CountMinus Const (e.Counter)(e.Counter2)>;
/* 2. Åñëè â ìóëüòèìíîæåñòâå íàøåëñÿ ñ÷åò÷èê íóæíîé ïåðåìåííîé – ïðîâåðÿåì ñîâïàäåíèå êðàòíîñòåé. */
	((var 'e' s.name) e.Counter) (e.Rest)(((var 'e' s.name) e.Counter2) e.Next)
		= e.Rest e.Next <CountMinus (var 'e' s.name)(e.Counter)(e.Counter2)>;
/* 3. Ïðîáåãàåì î÷åðåäíîé ýëåìåíò ìóëüòèìíîæåñòâà, íå ÿâëÿþùèéñÿ èñêîìûì ñ÷åò÷èêîì. */
	t.El (e.Rest)(t.Other e.Next)
		= <ElMinus t.El (e.Rest t.Other)(e.Next)>;
/* 4. Èñêîìîãî ñ÷åò÷èêà íå íàøëîñü – âîçâðàùàåì âñå ïðîñìîòðåííîå ìóëüòèìíîæåñòâî è ôëàã FALSE ñ
óêàçàíèåì íà òî, ÷òî â ìóëüòèìíîæåñòâå íå îêàçàëîñü ýëåìåíòà ñ íóæíîé êðàòíîñòüþ. */
	t.El (e.Rest)(/* EMPTY */) = e.Rest GREATER FALSE;
}

/* Ôóíêöèÿ ïðîâåðêè íà ðàâåíñòâî äâóõ óíàðíûõ ÷èñåë. Â ñëó÷àå óñïåõà âîçâðàùàåò ïóñòîå ñëîâî. 
Â ñëó÷àå íåóäà÷è – êîíñòàíòó FALSE ñ óêàçàíèåì çíàêà ñðàâíåíèÿ ÷èñåë. */
CountMinus {
	t.Name (/* EMPTY */)(/* EMPTY */) = /* EMPTY */;
	t.Name (s.C e.Other)(s.C e.Other2) = <CountMinus t.Name (e.Other)(e.Other2)>;
	t.Name (/* EMPTY */)(e.Number) = LESSER FALSE;
	t.Name (e.Number)(/* EMPTY */) = GREATER FALSE;
}

/*********************************************************************************************************************/
/*                             Äîáàâî÷íûå ôóíêöèè èíòåðïðåòàòîðà Int-Split-Sym                                       */
/*********************************************************************************************************************/

SplitRight {
  /* 1à. Ñòàòóñ ðàñùåïëåíèÿ íå îïðåäåëåí, íî îñòàëîñü åùå õîòÿ áû ïî îäíîìó òåðìó ñëåâà è ñïðàâà â óðàâíåíèè. 
  Ïðèñîåäèíÿåì ñîîòâåòñòâóþùèå òåðìû ñëåâà ê ïðåôèêñàì è âêëþ÷àåì èõ â ìóëüòèìíîæåñòâà ýëåìåíòîâ ïðåôèêñîâ. 
  Ïîñëå ÷åãî ïðîâåðÿåì ýòè ìóëüòèìíîæåñòâà íà ñîâïàäåíèå. Âûçûâàåì ôóíêöèþ CountMS. */
  (e.Result)'N'(e.MS1)(e.MS2)((e.LSuff)(e.RSuff))((e.LHS t.LL)(e.RHS t.RL))
	= <SplitRight 
		(e.Result)
		<CountMS 
			<Include t.LL (/* EMPTY */)(e.MS1)>
			<Include t.RL (/* EMPTY */)(e.MS2)>
		>
		((t.LL e.LSuff)(t.RL e.RSuff))
		((e.LHS)(e.RHS))
	>;
/* 1á. Ñòàòóñ òåêóùåãî ðàñùåïëåíèÿ: íåêîððåêòíîå. Äåëàåì ïîïûòêó ñëåäóþùåãî ðàñùåïëåíèÿ (ñì. ïðåäëîæåíèå 1à). */
  (e.Result)'F'(e.MS1)(e.MS2)((e.LSuff)(e.RSuff))((e.LHS t.LL)(e.RHS t.RL))
	= <SplitRight 
		(e.Result)
		<CountMS 
			<Include t.LL (/* EMPTY */)(e.MS1)>
			<Include t.RL (/* EMPTY */)(e.MS2)>
		>
		((t.LL e.LSuff)(t.RL e.RSuff))
		((e.LHS)(e.RHS))
	>;
/* 2. Ñòàòóñ òåêóùåãî ðàñùåïëåíèÿ: êîððåêòíîå. Ñîñòàâëÿåì èç ñóôôèêñîâ íîâîå óðàâíåíèå è ïåðåõîäèì ê àíàëèçó îñòàâøåéñÿ ÷àñòè èñõîäíîãî óðàâíåíèÿ, 
îáíóëèâ ðàñùåïëåíèå. */
  (e.Result)'T'(e.MS1)(e.MS2)((e.LSuff)(e.RSuff))((e.LHS)(e.RHS))
	= <SplitRight
		(e.Result ((e.LSuff)(e.RSuff)))
		'N'
		((Const ))((Const ))
		((/* EMPTY */)(/* EMPTY */))
		<Sim2 ((e.LHS)(e.RHS))>
	>;
/* 3. Ðàñùåïëÿòü áûëî íå÷åãî – óðàâíåíèå ïóñòîå. Âîçâðàùàåì âñå îñòàëüíûå óðàâíåíèÿ ñèñòåìû. */
  (e.Result)s.Log(e.MS1)(e.MS2)((/* EMPTY */)(/* EMPTY */))((/* EMPTY */)(/* EMPTY */))
		= e.Result;
/* 4. Èëè â ëåâîé, èëè â ïðàâîé ÷àñòè óðàâíåíèÿ áîëüøå íå îñòàëîñü òåðìîâ – ïîìåùàåì îñòàòîê óðàâíåíèÿ â èòîãîâóþ ñèñòåìó óðàâíåíèé ñàìûì ïåðâûì 
è ïðîâåðÿåì, íå ÿâëÿåòñÿ ëè îí ïðîòèâîðå÷èâûì ïî êðàòíîñòè ïåðåìåííûõ. */
  (e.Result)s.Log(e.MS1)(e.MS2)((e.LSuff)(e.RSuff))((e.LHS)(e.RHS))
	= <YieldPowerCheck 
		<Sim2 ((e.LHS e.LSuff)(e.RHS e.RSuff))>
			(<AddElsToMS (e.LHS)(e.MS1)>)
			(<AddElsToMS (e.RHS)(e.MS2)>)
	> 
	e.Result;
}

/* Ôóíêöèÿ âûâîäà ðåçóëüòàòà àíàëèçà óðàâíåíèÿ íà ïðîòèâîðå÷èâîñòü ïî êðàòíîñòè. Åñëè óðàâíåíèå îêàçûâàåòñÿ ïðîòèâîðå÷èâî (ïðàâèëî 2), 
  òîãäà îíî çàìåíÿåòñÿ íà òðèâèàëüíî ïðîòèâîðå÷èâîå óðàâíåíèå. */
SubjugateEq {
	False ((e.Eq1)(e.Eq2)) = ((e.Eq1)(e.Eq2));
	True ((e.Eq1)(e.Eq2)) = (('A')('B'));
}

/* Ðåøåíèå çàäà÷è: 
    ñóùåñòâóåò ëè ðàçíîñòü ìóëüòèìíîæåñòâ e.MS1 è e.MS2. Ðàçíîñòü èùåòñÿ êàê ðàçíîñòü èìåííî ìóëüòèìíîæåñòâ, 
     ò. å. ñ ó÷åòîì     êðàòíîñòè ýëåìåíòîâ. 
     Âõîäíîé ôîðìàò: s.Flag (e.MultiSet1)(e.MultiSet2). */
SubtractMS {
  /* 1. Åñëè ïåðâîå ìóëüòèìíîæåñòâî âêëþ÷àëî ýëåìåíòû âòîðîãî, è âòîðîå èñ÷åðïàíî, òîãäà ðàçíîñòü ñóùåñòâóåò. */
	GREATER (e.MS1)(/* EMPTY */) = True;
  /* 2. Åñëè âòîðîå ìóëüòèìíîæåñòâî âêëþ÷àëî ýëåìåíòû ïåðâîãî, è ïåðâîå èñ÷åðïàíî, òîãäà ðàçíîñòü ñóùåñòâóåò. */
	LESSER (/* EMPTY */)(e.MS2) = True;
  /* 3à, á. Åñëè ôëàã ñðàâíåíèÿ ìóëüòèìíîæåñòâ îäíîçíà÷íûé, è íè îäíî èç íèõ íå èñ÷åðïàíî, çàïóñêàåì èòåðàöèþ ïðîâåðêè âõîæäåíèÿ âî âòîðîå 
  ìíîæåñòâî î÷åðåäíîãî ýëåìåíòà ïåðâîãî. */
	GREATER (t.El e.MS1)(e.MS2) = <CheckInfo GREATER (<ElMinus t.El (/* EMPTY */)(e.MS2)>)(e.MS1)>;
	LESSER (t.El e.MS1)(e.MS2) = <CheckInfo LESSER (<ElMinus t.El (/* EMPTY */)(e.MS2)>)(e.MS1)>;
  /* 4. Åñëè ôëàã ñðàâíåíèÿ ìóëüòèìíîæåñòâ èíîé (íåñðàâíèìû), âîçâðàùàåì False. */
	t.Other (e.MS1)(e.MS2) = False;
}

/* Ôóíêöèÿ àíàëèçà ðåçóëüòàòà ïðîâåðêè ýëåìåíòà ìóëüòèìíîæåñòâà íà âêëþ÷åíèå – â êîíòåêñòå ïðåäûäóùåãî ñðàâíåíèÿ ìóëüòèìíîæåñòâ. */
CheckInfo {
  /* 1. Åñëè íåõâàòêà/èçáûòîê âõîæäåíèé ýëåìåíòà â ìóëüòèìíîæåñòâî ñîãëàñóåòñÿ ñ ïðåäûäóùèì àíàëèçîì, òîãäà  ïðîäîëæàåì ïîèñê ðàçíîñòè 
  ìóëüòèìíîæåñòâ. */
	s.Log (e.MS2 s.Log FALSE)(e.MS1) = <SubtractMS s.Log (e.MS1)(e.MS2)>;
  /* 2à,á. Åñëè ðåçóëüòàò àíàëèçà äàííîãî ýëåìåíòà ìóëüòèìíîæåñòâà ïðîòèâîïîëîæåí ðåçóëüòàòó ïðåäûäóùåãî àíàëèçà, òîãäà  
  âîçâðàùàåì ôëàã íåñðàâíèìîñòè ìóëüòèìíîæåñòâ. */
	GREATER (e.MS2 LESSER FALSE)(e.MS1) = <SubtractMS NONCOMP (e.MS1)(e.MS2)>;
	LESSER (e.MS2 GREATER FALSE)(e.MS1) = <SubtractMS NONCOMP (e.MS1)(e.MS2)>;
  /* 3. Åñëè äàííûé ýëåìåíò ïåðâîãî ìóëüòèìíîæåñòâà â òî÷íîñòè (ñ ó÷åòîì êðàòíîñòè) ïîâòîðÿåò ýëåìåíò âòîðîãî ìóëüòèìíîæåñòâà, 
  òîãäà ïðîäîëæàåì àíàëèç íåçàâèñèìî îò ïðåäûäóùèõ ðåçóëüòàòîâ. */
	s.Marker (e.MS2)(e.MS1) = <SubtractMS s.Marker (e.MS1)(e.MS2)>;
}

/* Àíàëèç ðåçóëüòàòà ñðàâíåíèÿ ñ÷åò÷èêîâ áóêâ â ìóëüòèìíîæåñòâàõ. Ýòîò øàã ÿâëÿåòñÿ âûäåëåííûì, ïîñêîëüêó îò íåãî çàâèñèò, óäàñòñÿ ëè 
  ïîëó÷èòü èíôîðìàöèþ î ïðîòèâîðå÷èâîñòè óðàâíåíèÿ. */
YieldCheckSubMS2 {
  /* 1. Åñëè ñ÷åò÷èêè áóêâ â äâóõ ìóëüòèìíîæåñòâàõ ñîâïàäàþò, äàëüíåéøèé àíàëèç íå ìîæåò ïîêàçàòü ïðîòèâîðå÷èâîñòü óðàâíåíèÿ. */
	/* EMPTY */ (e.MS1)(e.MS2) = False;
  /* 2. Â ïðîòèâíîì ñëó÷àå ïðîâåðÿåì, ñîïðîâîæäàåòñÿ ëè èçáûòîê áóêâ â îäíîé èç ÷àñòåé óðàâíåíèÿ èçáûòêîì âõîæäåíèé ïåðåìåííûõ. */
	s.Cmp FALSE (e.MS1)(e.MS2) = <SubtractMS s.Cmp (e.MS1)(e.MS2)>;
}

/* Âñïîìîãàòåëüíàÿ ôóíêöèÿ, âûäåëÿþùàÿ ïåðâûé øàã àíàëèçà ìóëüòèìíîæåñòâ òåðìîâ ÷àñòåé óðàâíåíèÿ: 
  àíàëèç êîëè÷åñòâà êîíñòàíò â ìóëüòèìíîæåñòâàõ. */
YieldCheckSubMS {
	(e.MS1 t.Const1)(e.MS2 t.Const2)
		= <YieldCheckSubMS2 <ElMinus t.Const1 (/* EMPTY */)(t.Const2)>(e.MS1)(e.MS2)>;
}

/* Ôóíêöèÿ, äîáàâëÿþùàÿ ïîñëåäîâàòåëüíîñòü ýëåìåíòîâ (êàê òåðìîâ êðàòíîñòè 1) â ìóëüòèìíîæåñòâî. */
AddElsToMS {
	(t.El e.Other)(e.MS) = <AddElsToMS (e.Other) <Include t.El(/* EMPTY */)(e.MS)>>;
	(/* EMPTY */)(e.MS) = e.MS;
}

YieldPowerCheck {
	((e.LHS)(e.RHS))(e.MS1)(e.MS2)
		= <AnalyzeMSDiff <SetInters (e.MS1)(e.MS2)(/* EMPTY */)(/* EMPTY */)(/* EMPTY */)>((e.LHS)(e.RHS))>;
}

SetInters {
	(((var 'e' s.name) e.Num1) e.MS1)(((var 'e' s.name) e.Num2) e.MS2)(e.Res1)(e.Res2)(e.ProcMS2)
		= <CountDiff (var 'e' s.name)(e.Num1)(e.Num2)(e.MS1)(e.ProcMS2 e.MS2)(e.Res1)(e.Res2)>;
	((Const e.Num1))((Const e.Num2))(e.Res1)(e.Res2)(e.ProcMS2)
		= <CountDiff Const(e.Num1)(e.Num2)( )(e.ProcMS2)(e.Res1)(e.Res2)>;
	(/* EMPTY */)(e.MS2)(e.Res1)(e.Res2)(e.Res22)
		= (e.Res1)(e.Res2 e.Res22 e.MS2);
	(t.Term e.MS1)(/* EMPTY */)(e.Res1)(e.Res2)(e.ProcMS2)
		= <SetInters (e.MS1)(e.ProcMS2)(e.Res1 t.Term)(e.Res2)()>;
	(t.Term e.MS1)(t.OtherTerm e.MS2)(e.Res1)(e.Res2)(e.ProcMS2)
		= <SetInters (t.Term e.MS1)(e.MS2)(e.Res1)(e.Res2)(e.ProcMS2 t.OtherTerm)>;
}

CountDiff {
	t.VarName(/* EMPTY */)(/* EMPTY */)(e.MS1)(e.MS2)(e.Res1)(e.Res2) = <SetInters (e.MS1)(e.MS2)(e.Res1)(e.Res2)(/* EMPTY */)>;
	t.VarName(e.Num)(/* EMPTY */)(e.MS1)(e.MS2)(e.Res1)(e.Res2) = <SetInters (e.MS1)(e.MS2)(e.Res1 (t.VarName e.Num))(e.Res2)(/* EMPTY */)>;
	t.VarName(/* EMPTY */)(e.Num)(e.MS1)(e.MS2)(e.Res1)(e.Res2) = <SetInters (e.MS1)(e.MS2)(e.Res1)(e.Res2 (t.VarName e.Num))(/* EMPTY */)>;
	t.VarName('I'e.Num1)('I'e.Num2)(e.MS1)(e.MS2)(e.Res1)(e.Res2) = <CountDiff t.VarName(e.Num1)(e.Num2)(e.MS1)(e.MS2)(e.Res1)(e.Res2)>;
}

AnalyzeMSDiff {
	(/* EMPTY */)(e.x (Const e.Num))((e.LHS)(e.RHS)) = (assign contradiction);
	(e.x (Const e.Num))(/* EMPTY */)((e.LHS)(e.RHS)) = (assign contradiction);
	(/* EMPTY */)(((var 'e' t.name) e.Num) e.Other)((e.LHS)(e.RHS)) = (assign (var 'e' t.name)(/* EMPTY */))<AnalyzeMSDiff (/* EMPTY */)(e.Other)((e.LHS)(e.RHS))>;
	(((var 'e' t.name) e.Num) e.Other)(/* EMPTY */)((e.LHS)(e.RHS)) = (assign (var 'e' t.name)(/* EMPTY */))<AnalyzeMSDiff (/* EMPTY */)(e.Other)((e.LHS)(e.RHS))>;
	(/* EMPTY */)(/* EMPTY */)((e.LHS)(e.RHS)) = ((e.LHS)(e.RHS));
	((Const e.Num1))(((var 'e' t.name) e.Num2))((e.LHS)(e.RHS)) = <CheckDivis Init (var 'e' t.name)(e.Num1)(e.Num2)>((e.LHS)(e.RHS));
	(((var 'e' t.name) e.Num2))((Const e.Num1))((e.LHS)(e.RHS)) = <CheckDivis Init (var 'e' t.name)(e.Num1)(e.Num2)>((e.LHS)(e.RHS));
	(((var 'e' s.name) e.Num))(e.MS)((e.LHS (var 'e' s.name))(e.RHS t.Last)) = <CheckEndTerms (((var 'e' s.name) e.Num))(e.MS)t.Last>((e.LHS (var 'e' s.name))(e.RHS t.Last));
	(e.MS)(((var 'e' s.name) e.Num))((e.LHS t.Last)(e.RHS (var 'e' s.name))) = <CheckEndTerms (((var 'e' s.name) e.Num))(e.MS)t.Last>((e.LHS t.Last)(e.RHS (var 'e' s.name)));
	(e.Rest1)(e.Rest2)((e.LHS)(e.RHS)) = ((e.LHS)(e.RHS));
}

CheckEndTerms {
	((t.Var e.Num))((Const e.Num2) e.MS2) s.Sym = <CreateEndAsg (<UnaryMinus (e.Num2)e.Num>)t.Var s.Sym>;
	((t.Var e.Num))((Const e.Num2) e.MS2) (var 's' s.name) = <CreateEndAsg (<UnaryMinus (e.Num2)e.Num>)t.Var (var 's' s.name)>;
	((t.Var e.Num))(((var 'e' s.name) e.Num2) e.MS2) (var 'e' s.name) = <CreateEndAsg (<UnaryMinus (e.Num2)e.Num>)t.Var (var 'e' s.name)>;
	(e.MS1)(t.x e.MS2)t.Term = <CheckEndTerms (e.MS1)(e.MS2)t.Term>;
	(e.MS1)(/* EMPTY */)t.Term = /* EMPTY */;
}

CreateEndAsg {
	(ERROR)t.Var t.Term = /* EMPTY */;
	(e.Nat)t.Var t.Term = (assign t.Var (t.Var t.Term));
}

CheckDivis {
	Init t.var (e.Num1)('I') = (assign t.var (e.Num1));
	Init t.var (e.Num1)(e.Num2) = <CheckDivis Started t.var (<UnaryMinus (e.Num1) e.Num2>)(e.Num2)()>;
	Started t.var (/* EMPTY */)(e.Num2)(e.Count) = (assign t.var ('I' e.Count));
	Started t.var (ERROR)(e.Num2)(e.Count) = (assign contradiction);
	Started t.var (e.Num1)(e.Num2)(e.Count) = <CheckDivis Started t.var (<UnaryMinus (e.Num1)e.Num2>)(e.Num2)('I'e.Count)>;
}

UnaryMinus {
	(e.1)/* EMPTY */ = e.1;
	(/* EMPTY */)e.1 = ERROR;
	('I'e.1)'I'e.2 = <UnaryMinus (e.1)e.2>;
}

CreateNewAsg {
	t.var s.Element (e.Num)
		= (assign t.var (<CreateNewAsg Started (<FindSuffix (<Variables>)s.Element>)(e.Num)>));
	Started (s.Name e.RestNames)('I' e.RestNum) = (var 's' s.Name)<CreateNewAsg Started (e.RestNames)(e.RestNum)>;
	Started (s.Name e.RestNames)(/* EMPTY */) = (s.Name);
}

NextVar {
	(s.x s.y e.Z) s.x = s.y;
	(s.y e.Z) s.x = <NextVar (e.Z) s.x>;
}

FindSuffix {
	(s.x e.Other) s.x = s.x e.Other;
	(s.x e.Other) s.y = <FindSuffix (e.Other) s.y>;
}
