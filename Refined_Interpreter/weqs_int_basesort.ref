/* The refined interpreter with the generation of recommended path restrictions based on the length analysis. */
*$MST_FROM_ENTRY;
*$MATCHING ForRepeatedSpecialization;
*$STRATEGY Applicative;

$ENTRY Go
{ e.Rules =
<Eq (e.Rules) <Sim ('Q')(  )
  <Decode (<Conc ('d e c f e f b a Fs f d a f a e Fs a f b Fs Bs b c Bs a d e b b c f a c e f c Bs =')
    ' d e Fs f e f b a c f d Es Fs Bs b Fs Bs a d e b b c f a Fs e f c b b'>)>
  <Decode (<Conc ('f b d e b e b b a c d e a a f e b b b d e e a a c a d c e d e d a f a e e a f b =')
    ' f b d e b e Bs a Fs d e a a f e Bs b d e e a a c a d c e d e d a f a e e a f b'>)>
  <Decode (<Conc ('e a Fs d f e f Fs d b b Fs f f c e e e b e b c f e f f d f f f b a c f f e Fs a c f =')
    ' e a c d f e f Fs d Bs c f f c e e e b e b c f e f f d f f f b a Fs f f e c a Fs f'>)>>>;
}

Conc {(e.1) e.2 = e.1 e.2;}

Const__ { e.x = e.x;}

Decode {
	(e.Left'='e.Right) = ((<Translate e.Left>)(<Translate e.Right>));
}

Variables {
	= 'QWERTYUIOPASDFGHJKLZXCVBNM';
}

Alphabet {
	= 'qwertyuiopasdfghjklzxcvbnm'; 
}

IfInSet {
	s.Term (s.Term e.Rest) = 'T';
	s.Term ( ) = 'F';
	s.Term (s.OtherTerm e.Rest) = <IfInSet s.Term (e.Rest)>;
}

Translate {
	/* EMPTY */ = /* EMPTY */;
	' 'e.x = <Translate e.x>;
	e.x' ' = <Translate e.x>;
	Started (e.Result) 'TF'(e.variables)(e.alphabet)s.Name's'
		= e.Result (var 'e' s.Name);
	Started (e.Result) 'TF'(e.variables)(e.alphabet)s.Name
		=  e.Result (var 's' s.Name);
	Started (e.Result)'FT'(e.variables)(e.alphabet)s.Name
		= e.Result s.Name;
	Started (e.Result)'TF'(e.variables)(e.alphabet)s.Name's ' s.Next e.Rest
		= <Translate Started (e.Result (var 'e' s.Name))
			<IfInSet s.Next(e.variables)><IfInSet s.Next(e.alphabet)>(e.variables)(e.alphabet) s.Next e.Rest>;
	Started (e.Result)'TF'(e.variables)(e.alphabet)s.Name' 's.Next e.Rest
		= <Translate Started (e.Result (var 's' s.Name))
			<IfInSet s.Next(e.variables)><IfInSet s.Next(e.alphabet)>(e.variables)(e.alphabet)s.Next e.Rest>;
	Started (e.Result)'FT'(e.variables)(e.alphabet)s.Name' 's.Next e.Rest
		= <Translate Started (e.Result s.Name)
			<IfInSet s.Next(e.variables)><IfInSet s.Next(e.alphabet)>(e.variables)(e.alphabet)s.Next e.Rest>;
	s.Term e.Rest = <Translate Started ( ) 
		<IfInSet s.Term(<Variables>)><IfInSet s.Term(<Alphabet>)>
		(<Variables>)(<Alphabet>) s.Term e.Rest>;
}

Eq {
	(/* EMPTY */)(Recommended e.Z)(s.VarName)((/*EMPTY*/)(/*EMPTY*/)) = True;
	(e.Rules)(Recommended e.Z)(s.VarName)((/*EMPTY*/)(/*EMPTY*/)) e.Other = <Eq (e.Rules)(Recommended e.Z)(s.VarName) e.Other>;
	((s.x's -> empty') e.R1)(Recommended (s.x's -> empty')e.OtherRec)(s.VarName) e.Eqs
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			<subst_2 (assign (var 'e' s.x)(/* EMPTY */))e.Eqs>
		>>;
	((s.x's -> 's.x's 's.Sym) e.R1)(Recommended (s.x's -> 's.x's 's.Sym'VAR')e.OtherRec)(s.VarName) e.Eqs
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			<subst_2 (assign (var 'e' s.x)((var 'e' s.x)(var 's' s.Sym)))e.Eqs>
		>>;
	((s.x's -> 's.x's 's.Sym) e.R1)(Recommended (s.x's -> 's.x's 's.Sym)e.OtherRec)(s.VarName) e.Eqs
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			<subst_2 (assign (var 'e' s.x)((var 'e' s.x)s.Sym))e.Eqs>
		>>;
	((s.x's -> 's.y' 's.x's') e.R1)(Recommended (s.x's -> 's.y'VAR 's.x's')e.OtherRec)(s.VarName) e.Eqs
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			<subst_2 (assign (var 'e' s.x)((var 's' s.y)(var 'e' s.x)))e.Eqs>
		>>;
	((s.x's -> 's.x's 's.y's') e.R1)(Recommended (s.x's -> 's.x's 's.y's')e.OtherRec)(s.VarName) e.Eqs
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			<subst_2 (assign (var 'e' s.x)((var 'e' s.x)(var 'e' s.y)))e.Eqs>
		>>;
	((s.x's -> empty') e.R1)(Recommended)(s.VarName)((e.LHS)((var 'e' s.x) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)(/* EMPTY */))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 'e' s.x)(/* EMPTY */))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)(/* EMPTY */))e.Other>
		>>;
	((s.x's -> empty') e.R1)(Recommended)(s.VarName)(((var 'e' s.x) e.LHS)(e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)(/* EMPTY */))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 'e' s.x)(/* EMPTY */))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)(/* EMPTY */))e.Other>
		>>;
	((s.x' -> 's.Sym) e.R1)(Recommended)(s.VarName)(((var 's' s.x) e.LHS)(s.Sym e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 's' s.x)(s.Sym))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 's' s.x)(s.Sym))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 's' s.x)(s.Sym))e.Other>
		>>;
	((s.x' -> 's.y) e.R1)(Recommended)(s.VarName)(((var 's' s.y) e.LHS)((var 's' s.x) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 's' s.x)((var 's' s.y)))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 's' s.x)((var 's' s.y)))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 's' s.x)((var 's' s.y)))e.Other>
		>>;
	((s.x's -> 's.Sym' 's.x's') e.R1)(Recommended)(s.VarName)(((var 'e' s.x) e.LHS)(s.Sym e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)(s.Sym (var 'e' s.x)))((var 'e' s.x))(e.LHS)>)
			(<subst (assign (var 'e' s.x)(s.Sym (var 'e' s.x)))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)(s.Sym (var 'e' s.x)))e.Other>
		>>;
	((s.x's -> 's.Sym' 's.x's') e.R1)(Recommended)(s.VarName)((s.Sym e.LHS)((var 'e' s.x) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)(s.Sym (var 'e' s.x)))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 'e' s.x)(s.Sym (var 'e' s.x)))((var 'e' s.x))(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)(s.Sym (var 'e' s.x)))e.Other>
		>>;
	((s.x's -> 's.y' 's.x's') e.R1)(Recommended)(s.VarName)(((var 'e' s.x) e.LHS)((var 's' s.y) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)((var 's' s.y) (var 'e' s.x)))((var 'e' s.x))(e.LHS)>)
			(<subst (assign (var 'e' s.x)((var 's' s.y) (var 'e' s.x)))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)((var 's' s.y) (var 'e' s.x)))e.Other>
		>>;
	((s.x's -> 's.y' 's.x's') e.R1)(Recommended)(s.VarName)(((var 's' s.y) e.LHS)((var 'e' s.x) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)((var 's' s.y) (var 'e' s.x)))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 'e' s.x)((var 's' s.y) (var 'e' s.x)))((var 'e' s.x))(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)((var 's' s.y) (var 'e' s.x)))e.Other>
		>>;
	((s.x's -> 's.y's 's.x's') e.R1)(Recommended)(s.VarName)(((var 'e' s.x) e.LHS)((var 'e' s.y) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.x)((var 'e' s.y) (var 'e' s.x)))((var 'e' s.x))(e.LHS)>)
			(<subst (assign (var 'e' s.x)((var 'e' s.y) (var 'e' s.x)))(/*EMPTY*/)(e.RHS)>))
			<subst_2 (assign (var 'e' s.x)((var 'e' s.y)(var 'e' s.x)))e.Other>
		>>;
	((s.y's -> 's.x's 's.y's') e.R1)(Recommended)(s.VarName)(((var 'e' s.x) e.LHS)((var 'e' s.y) e.RHS)) e.Other
		= <Eq (e.R1) <Sim (s.VarName)(/* EMPTY */)
			((<subst (assign (var 'e' s.y)((var 'e' s.x)(var 'e' s.y)))(/*EMPTY*/)(e.LHS)>)
			(<subst (assign (var 'e' s.y)((var 'e' s.x) (var 'e' s.y)))((var 'e' s.y))(e.RHS)>))
			<subst_2 (assign (var 'e' s.y)((var 'e' s.x)(var 'e' s.y)))e.Other>
		>>;
	(e.R1)e.Other = False;
}


subst {
	(assign t.var (e.val))(e.Result) (/*EMPTY*/) = e.Result;
	(assign (var s.type s.n) (e.val))(e.Result) ((var s.type s.n) e.Rest) = <subst (assign (var s.type s.n) (e.val))(e.Result <Const__ e.val>) (e.Rest)>;
	(assign t.var (e.val))(e.Result) (t.other e.Rest) = <subst (assign t.var (e.val))(e.Result t.other) (e.Rest)>;
}

subst_2 {
	t.Asg ((e.LHS)(e.RHS)) e.Other
		= ((<subst t.Asg (/* EMPTY */) (e.LHS)>)(<subst t.Asg (/* EMPTY */) (e.RHS)>))
		<subst_2 t.Asg e.Other>;
	t.Asg (assign e.asg) e.Other = (assign e.asg)<subst_2 t.Asg e.Other>;
	t.Asg /* EMPTY */ = /* EMPTY */;
}	

Sim {
	(s.VarName)(e.Processed)((s.x e.LHS)(s.x e.RHS)) e.Other = <Sim (s.VarName)(e.Processed)((e.LHS)(e.RHS)) e.Other>;
	(s.VarName)(e.Processed)((e.LHS s.x)(e.RHS s.x)) e.Other = <Sim (s.VarName)(e.Processed)((e.LHS)(e.RHS)) e.Other>;
	(s.VarName)(e.Processed)(((var s.type s.n) e.LHS)((var s.type s.n) e.RHS)) e.Other = <Sim (s.VarName)(e.Processed)((e.LHS)(e.RHS)) e.Other>;
	(s.VarName)(e.Processed)((e.LHS (var s.type s.n))(e.RHS (var s.type s.n))) e.Other = <Sim (s.VarName)(e.Processed) ((e.LHS)(e.RHS)) e.Other>;
	(s.VarName)(e.Processed)((/* EMPTY */)(/* EMPTY */)) e.Other = <Sim (s.VarName)(e.Processed ((/* EMPTY */)(/* EMPTY */))) e.Other>;
	(s.VarName)(e.Processed)((s.x e.LHS)(s.y e.RHS)) e.Other = (s.VarName)((s.x)(s.y));
	(s.VarName)(e.Processed)((e.LHS s.x)(e.RHS s.y)) e.Other = (s.VarName)((s.x)(s.y));
	(s.VarName)(e.Processed)((e.x)(e.y)) e.Other = 
		<Sim (s.VarName)(e.Processed <Split 
			(/* EMPTY */)
			'N'
			((Const ))((Const )) 
			((/* EMPTY */)(/* EMPTY */))
			((e.x)(e.y))
		>) e.Other>;
	(s.VarName)(e.Processed)/* EMPTY */ = <SortContr (s.VarName)(/* EMPTY */)(/* EMPTY */) e.Processed>;
}

SortContr {
	(s.VarName)(e.Processed)(e.RecAsgs)((s.x)(s.y)) e.Other = (Recommended)(s.VarName)((s.x)(s.y));
	(s.VarName)(e.Processed)(e.RecAsgs)(assign contradiction) e.Other = (Recommended)(s.VarName)(('A')('B'));
	(s.VarName)(e.Processed)(e.RecAsgs)(((var 's' s.n1))(s.Sym)) e.Other = <SortContr (s.VarName)((((var 's' s.n1))(s.Sym)) e.Processed)(e.RecAsgs) e.Other>;
	(s.VarName)(e.Processed)(e.RecAsgs)((s.Sym)((var 's' s.n1))) e.Other = <SortContr (s.VarName)((((var 's' s.n1))(s.Sym)) e.Processed)(e.RecAsgs) e.Other>;
	(s.VarName)(e.Processed)(e.RecAsgs)(((var 's' s.n1))((var 's' s.n2))) e.Other = <SortContr (s.VarName)((((var 's' s.n1))((var 's' s.n2))) e.Processed)(e.RecAsgs) e.Other>;
	(s.VarName)(e.Processed)(e.RecAsgs)(assign (var 'e' s.n) (/* EMPTY */)) e.Other
		= <SortContr (s.VarName)(e.Processed)((s.n's -> empty') e.RecAsgs) e.Other>;
	(s.VarName)(e.Processed)(/* EMPTY */)(assign (var 'e' s.n) ((var 'e' s.n) s.Sym)) e.Other
		= <SortContr (s.VarName)(e.Processed)((s.n's -> 's.n's 's.Sym))e.Other>;
	(s.VarName)(e.Processed)(/* EMPTY */)(assign (var 'e' s.n) ((var 'e' s.n) (var 's' s.m))) e.Other
		= <SortContr (s.VarName)(e.Processed)((s.n's -> 's.n's 's.n'VAR'))e.Other>;
	(s.VarName)(e.Processed)(/* EMPTY */)(assign (var 'e' s.n) ((var 'e' s.n)(var 'e' s.m))) e.Other
		= <SortContr (s.VarName)(e.Processed)((s.n's -> 's.n's 's.m's'))e.Other>;
	(s.VarName)(e.Processed)(/* EMPTY */)(assign (var 'e' s.n) ('I'e.Num)) e.Other
		= <SortContr (<NextVar (<Variables>)s.VarName>)(e.Processed)((s.n's -> 's.VarName'VAR 's.n's'))e.Other>;
	(s.VarName)(e.Processed)((s.x's -> 's.x's'e.Z))(assign (var 'e' s.n) ('I'e.Num)) e.Other
		= <SortContr (<NextVar (<Variables>)s.VarName>)(e.Processed)((s.n's -> 's.VarName'VAR 's.n's'))e.Other>;
	(s.VarName)(e.Processed)(e.RecAsgs)(assign e.NotRelevant) e.Other = <SortContr (s.VarName)(e.Processed)(e.RecAsgs) e.Other>;
	(s.VarName)(e.Processed)(e.RecAsgs)(e.NormalEq) e.Other = <SortContr (s.VarName)(e.Processed (e.NormalEq))(e.RecAsgs) e.Other>;
	(s.VarName)(e.Processed)(e.RecAsgs) /* EMPTY */ = (Recommended e.RecAsgs)(s.VarName)e.Processed;
}

SortAssignments {
	(e.Processed)(e.Eqs)(assign (var 'e' s.name)(/* EMPTY */))e.ToProcess
		= <SortAssignments (e.Processed (assign (var 'e' s.name)(/* EMPTY */)))(e.Eqs)e.ToProcess>;
	(e.Processed)(e.Eqs)(assign contradiction) e.ToProcess
		= (('A')('B'))(/* EMPTY */);
	(e.Processed)(e.Eqs)(assign e.Otherasg) e.ToProcess
		= <SortAssignments (e.Processed)(e.Eqs) e.ToProcess>;
	(e.Processed)(e.Eqs)((e.LHS)(e.RHS)) e.ToProcess
		= <SortAssignments (e.Processed)(e.Eqs ((e.LHS)(e.RHS))) e.ToProcess>;
	(e.Processed)(e.Eqs)/* EMPTY */ = e.Eqs (e.Processed);
}

SubstituteMany {
	e.Eqs (/* EMPTY */) = e.Eqs;
	e.Eqs (t.asg e.Rest) = <SubstituteMany <subst_2 t.asg e.Eqs> (e.Rest)>;
}

ProceedSort {
	(assign t.var (e.Data (s.Name))) e.Equations = <SortContr (s.Name)(/* EMPTY */)<subst_2 (assign t.var (e.Data))e.Equations>>;
}

Sim2 {
	((s.x e.LHS)(s.x e.RHS)) e.Other = <Sim2 ((e.LHS)(e.RHS)) e.Other>;
	((e.LHS s.x)(e.RHS s.x)) e.Other = <Sim2 ((e.LHS)(e.RHS)) e.Other>;
	(((var s.type s.n) e.LHS)((var s.type s.n) e.RHS)) e.Other = <Sim2 ((e.LHS)(e.RHS)) e.Other>;
	((e.LHS (var s.type s.n))(e.RHS (var s.type s.n))) e.Other = <Sim2 ((e.LHS)(e.RHS)) e.Other>;
	((/* EMPTY */)(/* EMPTY */)) e.Other = ((/* EMPTY */)(/* EMPTY */)) <Sim2 e.Other>;
	((s.x e.LHS)(s.y e.RHS)) e.Other = ((s.x)(s.y));
	((e.LHS s.x)(e.RHS s.y)) e.Other = ((s.x)(s.y));
	((e.x)(e.y)) e.Other = ((e.x)(e.y))
		<Sim2 e.Other>;
	/* EMPTY */ = /* EMPTY */;
}

Split {
	(e.Result)'N'(e.MS1)(e.MS2)((e.LPref)(e.RPref))((t.L1 e.LHS)(t.R1 e.RHS))
		= <Split 
			(e.Result)
			<CountMS <Include t.L1 (/* EMPTY */)(e.MS1)><Include t.R1 (/* EMPTY */)(e.MS2)>>
			((e.LPref t.L1)(e.RPref t.R1))
			((e.LHS)(e.RHS))
		>;
	(e.Result)'F'(e.MS1)(e.MS2)((e.LPref)(e.RPref))((t.L1 e.LHS)(t.R1 e.RHS))
		= <Split 
			(e.Result)
			<CountMS <Include t.L1 (/* EMPTY */)(e.MS1)><Include t.R1 (/* EMPTY */)(e.MS2)>>
			((e.LPref t.L1)(e.RPref t.R1))
			((e.LHS)(e.RHS))
		>;
	(e.Result)'T'(e.MS1)(e.MS2)((e.LPref)(e.RPref))((e.LHS)(e.RHS))
		= <Split
			(e.Result ((e.LPref)(e.RPref)))
			'N'
			((Const ))((Const ))
			((/* EMPTY */)(/* EMPTY */))
			<Sim2 ((e.LHS)(e.RHS))>
		>;
	(e.Result)s.Log(e.MS1)(e.MS2)((/* EMPTY */)(/* EMPTY */))((/* EMPTY */)(/* EMPTY */))
		= e.Result;
	(e.Result)s.Log(e.MS1)(e.MS2)((e.LPref)(e.RPref))((e.LHS)(e.RHS))
		= <SplitRight 
			(e.Result)
			'N'((Const ))((Const ))
			((/* EMPTY */)(/* EMPTY */))
			<Sim2 ((e.LPref e.LHS)(e.RPref e.RHS))>>;
}

Include {
	s.Sym (e.Prev)(e.MS (Const e.Counter)) = (e.Prev e.MS (Const e.Counter'I'));
	(var 's' s.name) (e.Prev)(e.MS (Const e.Counter)) = (e.Prev e.MS (Const e.Counter'I'));
	(var 'e' s.name)(e.Prev)(((var 'e' s.name) e.Counter) e.Rest)
		= (e.Prev ((var 'e' s.name) e.Counter'I') e.Rest);
	(var 'e' s.name)(e.Prev)(t.Other e.MS) = <Include (var 'e' s.name)(e.Prev t.Other)(e.MS)>;
	(var 'e' s.name)(e.Prev)(/* EMPTY */) = (((var 'e' s.name) 'I') e.Prev);
}

CountMS {
	(t.1 e.M1) (e.M2) = <AreEqual (e.M1)(<ElMinus t.1 (/* EMPTY */)(e.M2)>)> (t.1 e.M1) (e.M2);
}

AreEqual {
	(e.M1)(e.M2 FALSE) = 'F';
	(/* EMPTY */)(/* EMPTY */) = 'T';
	(/* EMPTY */)(e.Other) = 'F';
	(e.Other)(/* EMPTY */) = 'F';
	(t.1 e.M1)(e.M2) = <AreEqual (e.M1)(<ElMinus t.1 (/* EMPTY */)(e.M2)>)>;	
}

ElMinus {
	(Const e.Counter) (/* EMPTY */)(e.Rest (Const e.Counter2))
		= e.Rest <CountMinus Const (e.Counter)(e.Counter2)>;
	((var 'e' s.name) e.Counter) (e.Rest)(((var 'e' s.name) e.Counter2) e.Next)
		= e.Rest e.Next <CountMinus (var 'e' s.name)(e.Counter)(e.Counter2)>;
	t.El (e.Rest)(t.Other e.Next)
		= <ElMinus t.El (e.Rest t.Other)(e.Next)>;
	t.El (e.Rest)(/* EMPTY */) = e.Rest GREATER FALSE;
}

CountMinus {
	t.Name (/* EMPTY */)(/* EMPTY */) = /* EMPTY */;
	t.Name (s.C e.Other)(s.C e.Other2) = <CountMinus t.Name (e.Other)(e.Other2)>;
	t.Name (/* EMPTY */)(e.Number) = LESSER FALSE;
	t.Name (e.Number)(/* EMPTY */) = GREATER FALSE;
}

SplitRight {
  (e.Result)'N'(e.MS1)(e.MS2)((e.LSuff)(e.RSuff))((e.LHS t.LL)(e.RHS t.RL))
	= <SplitRight 
		(e.Result)
		<CountMS 
			<Include t.LL (/* EMPTY */)(e.MS1)>
			<Include t.RL (/* EMPTY */)(e.MS2)>
		>
		((t.LL e.LSuff)(t.RL e.RSuff))
		((e.LHS)(e.RHS))
	>;
  (e.Result)'F'(e.MS1)(e.MS2)((e.LSuff)(e.RSuff))((e.LHS t.LL)(e.RHS t.RL))
	= <SplitRight 
		(e.Result)
		<CountMS 
			<Include t.LL (/* EMPTY */)(e.MS1)>
			<Include t.RL (/* EMPTY */)(e.MS2)>
		>
		((t.LL e.LSuff)(t.RL e.RSuff))
		((e.LHS)(e.RHS))
	>;
  (e.Result)'T'(e.MS1)(e.MS2)((e.LSuff)(e.RSuff))((e.LHS)(e.RHS))
	= <SplitRight
		(e.Result ((e.LSuff)(e.RSuff)))
		'N'
		((Const ))((Const ))
		((/* EMPTY */)(/* EMPTY */))
		<Sim2 ((e.LHS)(e.RHS))>
	>;
  (e.Result)s.Log(e.MS1)(e.MS2)((/* EMPTY */)(/* EMPTY */))((/* EMPTY */)(/* EMPTY */))
		= e.Result;
  (e.Result)s.Log(e.MS1)(e.MS2)((e.LSuff)(e.RSuff))((e.LHS)(e.RHS))
	= <YieldPowerCheck 
		<Sim2 ((e.LHS e.LSuff)(e.RHS e.RSuff))>
			(<AddElsToMS (e.LHS)(e.MS1)>)
			(<AddElsToMS (e.RHS)(e.MS2)>)
	> 
	e.Result;
}

SubjugateEq {
	False ((e.Eq1)(e.Eq2)) = ((e.Eq1)(e.Eq2));
	True ((e.Eq1)(e.Eq2)) = (('A')('B'));
}

SubtractMS {
	GREATER (e.MS1)(/* EMPTY */) = True;
	LESSER (/* EMPTY */)(e.MS2) = True;
	GREATER (t.El e.MS1)(e.MS2) = <CheckInfo GREATER (<ElMinus t.El (/* EMPTY */)(e.MS2)>)(e.MS1)>;
	LESSER (t.El e.MS1)(e.MS2) = <CheckInfo LESSER (<ElMinus t.El (/* EMPTY */)(e.MS2)>)(e.MS1)>;
	t.Other (e.MS1)(e.MS2) = False;
}

CheckInfo {
	s.Log (e.MS2 s.Log FALSE)(e.MS1) = <SubtractMS s.Log (e.MS1)(e.MS2)>;
	GREATER (e.MS2 LESSER FALSE)(e.MS1) = <SubtractMS NONCOMP (e.MS1)(e.MS2)>;
	LESSER (e.MS2 GREATER FALSE)(e.MS1) = <SubtractMS NONCOMP (e.MS1)(e.MS2)>;
	s.Marker (e.MS2)(e.MS1) = <SubtractMS s.Marker (e.MS1)(e.MS2)>;
}

YieldCheckSubMS2 {
	/* EMPTY */ (e.MS1)(e.MS2) = False;
	s.Cmp FALSE (e.MS1)(e.MS2) = <SubtractMS s.Cmp (e.MS1)(e.MS2)>;
}

YieldCheckSubMS {
	(e.MS1 t.Const1)(e.MS2 t.Const2)
		= <YieldCheckSubMS2 <ElMinus t.Const1 (/* EMPTY */)(t.Const2)>(e.MS1)(e.MS2)>;
}

AddElsToMS {
	(t.El e.Other)(e.MS) = <AddElsToMS (e.Other) <Include t.El(/* EMPTY */)(e.MS)>>;
	(/* EMPTY */)(e.MS) = e.MS;
}

YieldPowerCheck {
	((e.LHS)(e.RHS))(e.MS1)(e.MS2)
		= <AnalyzeMSDiff <SetInters (e.MS1)(e.MS2)(/* EMPTY */)(/* EMPTY */)(/* EMPTY */)>((e.LHS)(e.RHS))>;
}

SetInters {
	(((var 'e' s.name) e.Num1) e.MS1)(((var 'e' s.name) e.Num2) e.MS2)(e.Res1)(e.Res2)(e.ProcMS2)
		= <CountDiff (var 'e' s.name)(e.Num1)(e.Num2)(e.MS1)(e.ProcMS2 e.MS2)(e.Res1)(e.Res2)>;
	((Const e.Num1))((Const e.Num2))(e.Res1)(e.Res2)(e.ProcMS2)
		= <CountDiff Const(e.Num1)(e.Num2)( )(e.ProcMS2)(e.Res1)(e.Res2)>;
	(/* EMPTY */)(e.MS2)(e.Res1)(e.Res2)(e.Res22)
		= (e.Res1)(e.Res2 e.Res22 e.MS2);
	(t.Term e.MS1)(/* EMPTY */)(e.Res1)(e.Res2)(e.ProcMS2)
		= <SetInters (e.MS1)(e.ProcMS2)(e.Res1 t.Term)(e.Res2)()>;
	(t.Term e.MS1)(t.OtherTerm e.MS2)(e.Res1)(e.Res2)(e.ProcMS2)
		= <SetInters (t.Term e.MS1)(e.MS2)(e.Res1)(e.Res2)(e.ProcMS2 t.OtherTerm)>;
}

CountDiff {
	t.VarName(/* EMPTY */)(/* EMPTY */)(e.MS1)(e.MS2)(e.Res1)(e.Res2) = <SetInters (e.MS1)(e.MS2)(e.Res1)(e.Res2)(/* EMPTY */)>;
	t.VarName(e.Num)(/* EMPTY */)(e.MS1)(e.MS2)(e.Res1)(e.Res2) = <SetInters (e.MS1)(e.MS2)(e.Res1 (t.VarName e.Num))(e.Res2)(/* EMPTY */)>;
	t.VarName(/* EMPTY */)(e.Num)(e.MS1)(e.MS2)(e.Res1)(e.Res2) = <SetInters (e.MS1)(e.MS2)(e.Res1)(e.Res2 (t.VarName e.Num))(/* EMPTY */)>;
	t.VarName('I'e.Num1)('I'e.Num2)(e.MS1)(e.MS2)(e.Res1)(e.Res2) = <CountDiff t.VarName(e.Num1)(e.Num2)(e.MS1)(e.MS2)(e.Res1)(e.Res2)>;
}

AnalyzeMSDiff {
	(/* EMPTY */)(e.x (Const e.Num))((e.LHS)(e.RHS)) = (assign contradiction);
	(e.x (Const e.Num))(/* EMPTY */)((e.LHS)(e.RHS)) = (assign contradiction);
	(/* EMPTY */)(((var 'e' t.name) e.Num) e.Other)((e.LHS)(e.RHS)) = (assign (var 'e' t.name)(/* EMPTY */))<AnalyzeMSDiff (/* EMPTY */)(e.Other)((e.LHS)(e.RHS))>;
	(((var 'e' t.name) e.Num) e.Other)(/* EMPTY */)((e.LHS)(e.RHS)) = (assign (var 'e' t.name)(/* EMPTY */))<AnalyzeMSDiff (/* EMPTY */)(e.Other)((e.LHS)(e.RHS))>;
	(/* EMPTY */)(/* EMPTY */)((e.LHS)(e.RHS)) = ((e.LHS)(e.RHS));
	((Const e.Num1))(((var 'e' t.name) e.Num2))((e.LHS)(e.RHS)) = <CheckDivis Init (var 'e' t.name)(e.Num1)(e.Num2)>((e.LHS)(e.RHS));
	(((var 'e' t.name) e.Num2))((Const e.Num1))((e.LHS)(e.RHS)) = <CheckDivis Init (var 'e' t.name)(e.Num1)(e.Num2)>((e.LHS)(e.RHS));
	(((var 'e' s.name) e.Num))(e.MS)((e.LHS (var 'e' s.name))(e.RHS t.Last)) = <CheckEndTerms (((var 'e' s.name) e.Num))(e.MS)t.Last>((e.LHS (var 'e' s.name))(e.RHS t.Last));
	(e.MS)(((var 'e' s.name) e.Num))((e.LHS t.Last)(e.RHS (var 'e' s.name))) = <CheckEndTerms (((var 'e' s.name) e.Num))(e.MS)t.Last>((e.LHS t.Last)(e.RHS (var 'e' s.name)));
	(e.Rest1)(e.Rest2)((e.LHS)(e.RHS)) = ((e.LHS)(e.RHS));
}

CheckEndTerms {
	((t.Var e.Num))((Const e.Num2) e.MS2) s.Sym = <CreateEndAsg (<UnaryMinus (e.Num2)e.Num>)t.Var s.Sym>;
	((t.Var e.Num))((Const e.Num2) e.MS2) (var 's' s.name) = <CreateEndAsg (<UnaryMinus (e.Num2)e.Num>)t.Var (var 's' s.name)>;
	((t.Var e.Num))(((var 'e' s.name) e.Num2) e.MS2) (var 'e' s.name) = <CreateEndAsg (<UnaryMinus (e.Num2)e.Num>)t.Var (var 'e' s.name)>;
	(e.MS1)(t.x e.MS2)t.Term = <CheckEndTerms (e.MS1)(e.MS2)t.Term>;
	(e.MS1)(/* EMPTY */)t.Term = /* EMPTY */;
}

CreateEndAsg {
	(ERROR)t.Var t.Term = /* EMPTY */;
	(e.Nat)t.Var t.Term = (assign t.Var (t.Var t.Term));
}

CheckDivis {
	Init t.var (e.Num1)('I') = (assign t.var (e.Num1));
	Init t.var (e.Num1)(e.Num2) = <CheckDivis Started t.var (<UnaryMinus (e.Num1) e.Num2>)(e.Num2)()>;
	Started t.var (/* EMPTY */)(e.Num2)(e.Count) = (assign t.var ('I' e.Count));
	Started t.var (ERROR)(e.Num2)(e.Count) = (assign contradiction);
	Started t.var (e.Num1)(e.Num2)(e.Count) = <CheckDivis Started t.var (<UnaryMinus (e.Num1)e.Num2>)(e.Num2)('I'e.Count)>;
}

UnaryMinus {
	(e.1)/* EMPTY */ = e.1;
	(/* EMPTY */)e.1 = ERROR;
	('I'e.1)'I'e.2 = <UnaryMinus (e.1)e.2>;
}

CreateNewAsg {
	t.var s.Element (e.Num)
		= (assign t.var (<CreateNewAsg Started (<FindSuffix (<Variables>)s.Element>)(e.Num)>));
	Started (s.Name e.RestNames)('I' e.RestNum) = (var 's' s.Name)<CreateNewAsg Started (e.RestNames)(e.RestNum)>;
	Started (s.Name e.RestNames)(/* EMPTY */) = (s.Name);
}

NextVar {
	(s.x s.y e.Z) s.x = s.y;
	(s.y e.Z) s.x = <NextVar (e.Z) s.x>;
}

FindSuffix {
	(s.x e.Other) s.x = s.x e.Other;
	(s.x e.Other) s.y = <FindSuffix (e.Other) s.y>;
}