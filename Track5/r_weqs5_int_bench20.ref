
*$MST_FROM_ENTRY;

*$MATCHING ForRepeatedSpecialization ;

*$STRATEGY Applicative ;
/*
$ENTRY Go {
 = <Prout <Go e.1 >> ;
}
*/

***
/*
*  InputFormat: <Go e.41 >
*  OutputFormat: ==> e.0 
*/


$ENTRY Go {
 (('Is -> empty') e.101) =  False;
 (('Is -> c Is') ('Is -> empty') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> empty') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> empty') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Fs -> empty') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Fs -> Is Fs') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> empty') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> empty') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> empty') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> empty') e.101) =  False
               ;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty')
    ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> empty') ('Ds -> empty') e.101
 ) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs')
    ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> empty') ('Ds -> f Ds') ('Ds -> empty') e.101
 ) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs')
    ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> empty') ('Ds -> f Ds') ('Ds -> b Ds') ('Ds -> empty') e.101
 ) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs')
    ('Fs -> f Fs') ('Fs -> empty') ('Ds -> f Ds') ('Ds -> b Ds') ('Ds -> d Ds') ('Ds -> empty') e.101
 ) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs')
    ('Fs -> f Fs') ('Fs -> empty') ('Ds -> f Ds') ('Ds -> b Ds') ('Ds -> d Ds') ('Ds -> e Ds') ('Ds -> empty')
 ) =  True;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs')
    ('Fs -> f Fs') ('Fs -> empty') ('Ds -> f Ds') ('Ds -> b Ds') ('Ds -> d Ds') ('Ds -> e Ds') ('Ds -> empty') e.101
 ) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs')
    ('Fs -> f Fs') ('Fs -> empty') ('Ds -> f Ds') ('Ds -> b Ds') ('Ds -> d Ds') ('Ds -> e Ds') e.101
 ) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs')
    ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> empty') ('Ds -> f Ds') ('Ds -> b Ds') ('Ds -> d Ds') e.101
 ) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs')
    ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> empty') ('Ds -> f Ds') ('Ds -> b Ds') e.101
 ) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty')
    ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> empty') ('Ds -> f Ds') e.101
 ) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> empty') e.101) =  False
               ;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> b Fs') ('Fs -> empty') e.101) =  False
               ;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> b Fs') ('Fs -> e Fs') ('Fs -> empty') e.101) =  False
               ;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> b Fs') ('Fs -> e Fs') ('Fs -> f Fs') ('Fs -> empty') e.101) =  False
               ;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> b Fs') ('Fs -> e Fs') ('Fs -> f Fs') ('Fs -> b Fs') ('Fs -> empty') e.101) =  False
               ;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> b Fs') ('Fs -> e Fs') ('Fs -> f Fs') ('Fs -> b Fs') ('Fs -> c Fs') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> b Fs') ('Fs -> e Fs') ('Fs -> f Fs') ('Fs -> b Fs') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> b Fs') ('Fs -> e Fs') ('Fs -> f Fs') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> b Fs') ('Fs -> e Fs') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') ('Fs -> b Fs') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') ('Fs -> f Fs') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') ('Fs -> d Fs') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') ('Fs -> f Fs') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') ('Is -> empty') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') ('Is -> f Is') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') ('Is -> Fs Is') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') ('Is -> e Is') e.101) =  False;
 (('Is -> c Is') ('Is -> e Is') e.101) =  False;
 (('Is -> c Is') e.101) =  False;
 (e.101) =  False;
}

****************************** The End ************************************
